
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006794  08006794  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006794  08006794  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006794  08006794  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800679c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  2000007c  08006818  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  08006818  0002136c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cce  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a5  00000000  00000000  00037db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003b660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001139  00000000  00000000  0003cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac28  00000000  00000000  0003dd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5ac  00000000  00000000  000589b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a963  00000000  00000000  00072f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006114  00000000  00000000  0010d8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001139dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080065e0 	.word	0x080065e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080065e0 	.word	0x080065e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000098 	.word	0x20000098
 800018c:	20000138 	.word	0x20000138

08000190 <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8000194:	f000 f8c6 	bl	8000324 <Lcd_configure>
			lcd_write_command(0x33);
 8000198:	2033      	movs	r0, #51	; 0x33
 800019a:	f000 f96b 	bl	8000474 <lcd_write_command>
			lcd_write_command(0x32);
 800019e:	2032      	movs	r0, #50	; 0x32
 80001a0:	f000 f968 	bl	8000474 <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 80001a4:	2028      	movs	r0, #40	; 0x28
 80001a6:	f000 f965 	bl	8000474 <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 80001aa:	2001      	movs	r0, #1
 80001ac:	f000 f962 	bl	8000474 <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80001b0:	200c      	movs	r0, #12
 80001b2:	f000 f95f 	bl	8000474 <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 80001b6:	2006      	movs	r0, #6
 80001b8:	f000 f95c 	bl	8000474 <lcd_write_command>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}

080001c0 <Lcd_write_int>:

/**
 * Write a interger variable on the LCD
 */
void Lcd_write_int(int number)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	4906      	ldr	r1, [pc, #24]	; (80001e8 <Lcd_write_int+0x28>)
 80001d0:	4618      	mov	r0, r3
 80001d2:	f005 fcfd 	bl	8005bd0 <siprintf>
	Lcd_write_string(buffer);
 80001d6:	f107 030c 	add.w	r3, r7, #12
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 f806 	bl	80001ec <Lcd_write_string>
}
 80001e0:	bf00      	nop
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	080065f8 	.word	0x080065f8

080001ec <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 80001ec:	b590      	push	{r4, r7, lr}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	e009      	b.n	800020e <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f956 	bl	80004b4 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	3301      	adds	r3, #1
 800020c:	73fb      	strb	r3, [r7, #15]
 800020e:	7bfc      	ldrb	r4, [r7, #15]
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ff9d 	bl	8000150 <strlen>
 8000216:	4603      	mov	r3, r0
 8000218:	429c      	cmp	r4, r3
 800021a:	d3ee      	bcc.n	80001fa <Lcd_write_string+0xe>
	}
}
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bd90      	pop	{r4, r7, pc}

08000226 <Lcd_clear_display>:

/**
 * Clear the screen
 */
void Lcd_clear_display(void)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
	lcd_write_command(CLEAR_DISPLAY);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f922 	bl	8000474 <lcd_write_command>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <Lcd_create_custom_char>:

/****
** create a custom char to location
****/
void Lcd_create_custom_char(uint8_t location, uint8_t* data_bytes)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	// We only have 8 locations 0-7 for custom chars
	location &= 0x07; 
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 0307 	and.w	r3, r3, #7
 8000246:	71fb      	strb	r3, [r7, #7]
	// Set CGRAM address
	lcd_write_command(SET_CGRAM_ADDRESS | (location << 3));
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	b25b      	sxtb	r3, r3
 800024e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000252:	b25b      	sxtb	r3, r3
 8000254:	b2db      	uxtb	r3, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f90c 	bl	8000474 <lcd_write_command>
	
	// Write 8 bytes custom char pattern
	for (i = 0; i < 8; i++) 
 800025c:	2300      	movs	r3, #0
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e009      	b.n	8000276 <Lcd_create_custom_char+0x42>
	{
		lcd_write_data(data_bytes[i]);
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	4413      	add	r3, r2
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f922 	bl	80004b4 <lcd_write_data>
	for (i = 0; i < 8; i++) 
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	3301      	adds	r3, #1
 8000274:	73fb      	strb	r3, [r7, #15]
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	2b07      	cmp	r3, #7
 800027a:	d9f2      	bls.n	8000262 <Lcd_create_custom_char+0x2e>
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	4603      	mov	r3, r0
 800028e:	460a      	mov	r2, r1
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	4613      	mov	r3, r2
 8000294:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 8000296:	79bb      	ldrb	r3, [r7, #6]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d107      	bne.n	80002ac <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f8e5 	bl	8000474 <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 80002aa:	e00a      	b.n	80002c2 <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	3340      	adds	r3, #64	; 0x40
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	b25b      	sxtb	r3, r3
 80002b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002b8:	b25b      	sxtb	r3, r3
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f8d9 	bl	8000474 <lcd_write_command>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <Lcd_write_custom_char>:

/****
** write custom char to x,y on the LCD
*****/
void Lcd_write_custom_char( uint8_t x, uint8_t y, uint8_t location)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	460b      	mov	r3, r1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	4613      	mov	r3, r2
 80002da:	717b      	strb	r3, [r7, #5]
	Lcd_gotoxy( x,y);
 80002dc:	79ba      	ldrb	r2, [r7, #6]
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffcf 	bl	8000286 <Lcd_gotoxy>
	lcd_write_data(location);
 80002e8:	797b      	ldrb	r3, [r7, #5]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f8e2 	bl	80004b4 <lcd_write_data>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Lcd_clear_xy>:
/*****
** clear x,y on the LCD
******/

void Lcd_clear_xy(uint8_t x,uint8_t y)
{	
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
	Lcd_gotoxy( x,y);
 8000308:	79ba      	ldrb	r2, [r7, #6]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffb9 	bl	8000286 <Lcd_gotoxy>
	lcd_write_data(' ');
 8000314:	2020      	movs	r0, #32
 8000316:	f000 f8cd 	bl	80004b4 <lcd_write_data>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b4b      	ldr	r3, [pc, #300]	; (8000468 <Lcd_configure+0x144>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a4a      	ldr	r2, [pc, #296]	; (8000468 <Lcd_configure+0x144>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b48      	ldr	r3, [pc, #288]	; (8000468 <Lcd_configure+0x144>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b45      	ldr	r3, [pc, #276]	; (8000468 <Lcd_configure+0x144>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a44      	ldr	r2, [pc, #272]	; (8000468 <Lcd_configure+0x144>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b42      	ldr	r3, [pc, #264]	; (8000468 <Lcd_configure+0x144>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0308 	and.w	r3, r3, #8
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000368:	4b3f      	ldr	r3, [pc, #252]	; (8000468 <Lcd_configure+0x144>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a3e      	ldr	r2, [pc, #248]	; (8000468 <Lcd_configure+0x144>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b3c      	ldr	r3, [pc, #240]	; (8000468 <Lcd_configure+0x144>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0310 	and.w	r3, r3, #16
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 8000380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000384:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4834      	ldr	r0, [pc, #208]	; (800046c <Lcd_configure+0x148>)
 800039a:	f002 f965 	bl	8002668 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 800039e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ac:	2303      	movs	r3, #3
 80003ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	482d      	ldr	r0, [pc, #180]	; (800046c <Lcd_configure+0x148>)
 80003b8:	f002 f956 	bl	8002668 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 80003bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ca:	2303      	movs	r3, #3
 80003cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4825      	ldr	r0, [pc, #148]	; (800046c <Lcd_configure+0x148>)
 80003d6:	f002 f947 	bl	8002668 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e0:	4822      	ldr	r0, [pc, #136]	; (800046c <Lcd_configure+0x148>)
 80003e2:	f002 fadc 	bl	800299e <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f4:	2303      	movs	r3, #3
 80003f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	481c      	ldr	r0, [pc, #112]	; (8000470 <Lcd_configure+0x14c>)
 8000400:	f002 f932 	bl	8002668 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000412:	2303      	movs	r3, #3
 8000414:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4814      	ldr	r0, [pc, #80]	; (8000470 <Lcd_configure+0x14c>)
 800041e:	f002 f923 	bl	8002668 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 8000422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000426:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000430:	2303      	movs	r3, #3
 8000432:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	480d      	ldr	r0, [pc, #52]	; (8000470 <Lcd_configure+0x14c>)
 800043c:	f002 f914 	bl	8002668 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 8000440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000444:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044e:	2303      	movs	r3, #3
 8000450:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <Lcd_configure+0x14c>)
 800045a:	f002 f905 	bl	8002668 <HAL_GPIO_Init>
	
}
 800045e:	bf00      	nop
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800
 8000470:	40010c00 	.word	0x40010c00

08000474 <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000484:	480a      	ldr	r0, [pc, #40]	; (80004b0 <lcd_write_command+0x3c>)
 8000486:	f002 fa8a 	bl	800299e <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	091b      	lsrs	r3, r3, #4
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2104      	movs	r1, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f82e 	bl	80004f4 <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	f003 030f 	and.w	r3, r3, #15
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2104      	movs	r1, #4
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f826 	bl	80004f4 <lcd_write>
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40010800 	.word	0x40010800

080004b4 <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c4:	480a      	ldr	r0, [pc, #40]	; (80004f0 <lcd_write_data+0x3c>)
 80004c6:	f002 fa6a 	bl	800299e <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2104      	movs	r1, #4
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f80e 	bl	80004f4 <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2104      	movs	r1, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f806 	bl	80004f4 <lcd_write>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40010800 	.word	0x40010800

080004f4 <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e023      	b.n	8000552 <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	fa42 f303 	asr.w	r3, r2, r3
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10c      	bne.n	8000534 <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	4a18      	ldr	r2, [pc, #96]	; (8000580 <lcd_write+0x8c>)
 800051e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <lcd_write+0x90>)
 8000526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800052a:	2200      	movs	r2, #0
 800052c:	4619      	mov	r1, r3
 800052e:	f002 fa36 	bl	800299e <HAL_GPIO_WritePin>
 8000532:	e00b      	b.n	800054c <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <lcd_write+0x8c>)
 8000538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <lcd_write+0x90>)
 8000540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 fa29 	bl	800299e <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	3301      	adds	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	429a      	cmp	r2, r3
 8000558:	d3d7      	bcc.n	800050a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <lcd_write+0x94>)
 8000562:	f002 fa1c 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000566:	2001      	movs	r0, #1
 8000568:	f001 f83c 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <lcd_write+0x94>)
 8000574:	f002 fa13 	bl	800299e <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000000 	.word	0x20000000
 8000584:	20000010 	.word	0x20000010
 8000588:	40010800 	.word	0x40010800

0800058c <debounce>:


							/*HAM CHONG DOI NUT NHAN */

uint8_t debounce(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	807b      	strh	r3, [r7, #2]
	    if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	4619      	mov	r1, r3
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f002 f9e7 	bl	8002970 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10c      	bne.n	80005c2 <debounce+0x36>
	    {
	    	HAL_Delay(80);
 80005a8:	2050      	movs	r0, #80	; 0x50
 80005aa:	f001 f81b 	bl	80015e4 <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	4619      	mov	r1, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f002 f9dc 	bl	8002970 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <debounce+0x36>
	        {
	            return 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <debounce+0x38>
	        }
	    }
	    return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HienThiCacDonVi>:



                                  /* HAM DE HIEN THI LEN LCD */
void HienThiCacDonVi (void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

	uint8_t degreeC[8] = { 0b00110, 0b00110 };    /*cai nay de tao ra dau do*/
 80005d2:	f240 6306 	movw	r3, #1542	; 0x606
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
	/*Nhan nut menu*/
	if (debounce(GPIOB, GPIO_PIN_0)==1)
 80005dc:	2101      	movs	r1, #1
 80005de:	48c3      	ldr	r0, [pc, #780]	; (80008ec <HienThiCacDonVi+0x320>)
 80005e0:	f7ff ffd4 	bl	800058c <debounce>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d108      	bne.n	80005fc <HienThiCacDonVi+0x30>
	{
		Lcd_clear_display();
 80005ea:	f7ff fe1c 	bl	8000226 <Lcd_clear_display>
		menu=menu+1;
 80005ee:	4bc0      	ldr	r3, [pc, #768]	; (80008f0 <HienThiCacDonVi+0x324>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4bbd      	ldr	r3, [pc, #756]	; (80008f0 <HienThiCacDonVi+0x324>)
 80005fa:	701a      	strb	r2, [r3, #0]
	}


	if(menu==0)
 80005fc:	4bbc      	ldr	r3, [pc, #752]	; (80008f0 <HienThiCacDonVi+0x324>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d156      	bne.n	80006b4 <HienThiCacDonVi+0xe8>
	{
	Lcd_gotoxy(0, 0);
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff fe3c 	bl	8000286 <Lcd_gotoxy>
	sprintf(a, "%d  ", tempVariable);
 800060e:	4bb9      	ldr	r3, [pc, #740]	; (80008f4 <HienThiCacDonVi+0x328>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	49b8      	ldr	r1, [pc, #736]	; (80008f8 <HienThiCacDonVi+0x32c>)
 8000616:	48b9      	ldr	r0, [pc, #740]	; (80008fc <HienThiCacDonVi+0x330>)
 8000618:	f005 fada 	bl	8005bd0 <siprintf>
	Lcd_write_string(a);
 800061c:	48b7      	ldr	r0, [pc, #732]	; (80008fc <HienThiCacDonVi+0x330>)
 800061e:	f7ff fde5 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(11, 0);
 8000622:	2100      	movs	r1, #0
 8000624:	200b      	movs	r0, #11
 8000626:	f7ff fe2e 	bl	8000286 <Lcd_gotoxy>
	sprintf(a, "%d  ", gasVariable);
 800062a:	4bb5      	ldr	r3, [pc, #724]	; (8000900 <HienThiCacDonVi+0x334>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	49b1      	ldr	r1, [pc, #708]	; (80008f8 <HienThiCacDonVi+0x32c>)
 8000632:	48b2      	ldr	r0, [pc, #712]	; (80008fc <HienThiCacDonVi+0x330>)
 8000634:	f005 facc 	bl	8005bd0 <siprintf>
	Lcd_write_string(a);
 8000638:	48b0      	ldr	r0, [pc, #704]	; (80008fc <HienThiCacDonVi+0x330>)
 800063a:	f7ff fdd7 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(11, 1);
 800063e:	2101      	movs	r1, #1
 8000640:	200b      	movs	r0, #11
 8000642:	f7ff fe20 	bl	8000286 <Lcd_gotoxy>
	sprintf(a, "%d  ", fireVariable);
 8000646:	4baf      	ldr	r3, [pc, #700]	; (8000904 <HienThiCacDonVi+0x338>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	49aa      	ldr	r1, [pc, #680]	; (80008f8 <HienThiCacDonVi+0x32c>)
 800064e:	48ab      	ldr	r0, [pc, #684]	; (80008fc <HienThiCacDonVi+0x330>)
 8000650:	f005 fabe 	bl	8005bd0 <siprintf>
	Lcd_write_string(a);
 8000654:	48a9      	ldr	r0, [pc, #676]	; (80008fc <HienThiCacDonVi+0x330>)
 8000656:	f7ff fdc9 	bl	80001ec <Lcd_write_string>
	Lcd_create_custom_char(0, degreeC);
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff fde8 	bl	8000234 <Lcd_create_custom_char>
	Lcd_write_custom_char(3, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2003      	movs	r0, #3
 800066a:	f7ff fe2e 	bl	80002ca <Lcd_write_custom_char>
	Lcd_gotoxy(4, 0);
 800066e:	2100      	movs	r1, #0
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff fe08 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("C");
 8000676:	48a4      	ldr	r0, [pc, #656]	; (8000908 <HienThiCacDonVi+0x33c>)
 8000678:	f7ff fdb8 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(8, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2008      	movs	r0, #8
 8000680:	f7ff fe01 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("Ga:");
 8000684:	48a1      	ldr	r0, [pc, #644]	; (800090c <HienThiCacDonVi+0x340>)
 8000686:	f7ff fdb1 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(15, 0);
 800068a:	2100      	movs	r1, #0
 800068c:	200f      	movs	r0, #15
 800068e:	f7ff fdfa 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("%");
 8000692:	489f      	ldr	r0, [pc, #636]	; (8000910 <HienThiCacDonVi+0x344>)
 8000694:	f7ff fdaa 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(8, 1);
 8000698:	2101      	movs	r1, #1
 800069a:	2008      	movs	r0, #8
 800069c:	f7ff fdf3 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("Fi:");
 80006a0:	489c      	ldr	r0, [pc, #624]	; (8000914 <HienThiCacDonVi+0x348>)
 80006a2:	f7ff fda3 	bl	80001ec <Lcd_write_string>
	Lcd_gotoxy(15, 1);
 80006a6:	2101      	movs	r1, #1
 80006a8:	200f      	movs	r0, #15
 80006aa:	f7ff fdec 	bl	8000286 <Lcd_gotoxy>
	Lcd_write_string("%");
 80006ae:	4898      	ldr	r0, [pc, #608]	; (8000910 <HienThiCacDonVi+0x344>)
 80006b0:	f7ff fd9c 	bl	80001ec <Lcd_write_string>
	}


		if(menu==1)
 80006b4:	4b8e      	ldr	r3, [pc, #568]	; (80008f0 <HienThiCacDonVi+0x324>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d165      	bne.n	800078a <HienThiCacDonVi+0x1be>
		{
			Lcd_gotoxy(0, 0);
 80006be:	2100      	movs	r1, #0
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff fde0 	bl	8000286 <Lcd_gotoxy>
			Lcd_write_string("Temp range:");
 80006c6:	4894      	ldr	r0, [pc, #592]	; (8000918 <HienThiCacDonVi+0x34c>)
 80006c8:	f7ff fd90 	bl	80001ec <Lcd_write_string>
			Lcd_create_custom_char(0, degreeC);
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff fdaf 	bl	8000234 <Lcd_create_custom_char>
			Lcd_write_custom_char(3, 1, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	2003      	movs	r0, #3
 80006dc:	f7ff fdf5 	bl	80002ca <Lcd_write_custom_char>
			Lcd_gotoxy(4, 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff fdcf 	bl	8000286 <Lcd_gotoxy>
			Lcd_write_string("C");
 80006e8:	4887      	ldr	r0, [pc, #540]	; (8000908 <HienThiCacDonVi+0x33c>)
 80006ea:	f7ff fd7f 	bl	80001ec <Lcd_write_string>
			Lcd_gotoxy(0, 1);
 80006ee:	2101      	movs	r1, #1
 80006f0:	2000      	movs	r0, #0
 80006f2:	f7ff fdc8 	bl	8000286 <Lcd_gotoxy>
			Lcd_write_int(tempRange);
 80006f6:	4b89      	ldr	r3, [pc, #548]	; (800091c <HienThiCacDonVi+0x350>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd5f 	bl	80001c0 <Lcd_write_int>
			if (debounce(GPIOB, GPIO_PIN_1)==1)
 8000702:	2102      	movs	r1, #2
 8000704:	4879      	ldr	r0, [pc, #484]	; (80008ec <HienThiCacDonVi+0x320>)
 8000706:	f7ff ff41 	bl	800058c <debounce>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d11a      	bne.n	8000746 <HienThiCacDonVi+0x17a>
			{
				tempRange++;
 8000710:	4b82      	ldr	r3, [pc, #520]	; (800091c <HienThiCacDonVi+0x350>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	3301      	adds	r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b80      	ldr	r3, [pc, #512]	; (800091c <HienThiCacDonVi+0x350>)
 800071c:	701a      	strb	r2, [r3, #0]
				Lcd_clear_xy(0,1);
 800071e:	2101      	movs	r1, #1
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fde9 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(1,1);
 8000726:	2101      	movs	r1, #1
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff fde5 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(2,1);
 800072e:	2101      	movs	r1, #1
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff fde1 	bl	80002f8 <Lcd_clear_xy>
				if(tempRange >150)
 8000736:	4b79      	ldr	r3, [pc, #484]	; (800091c <HienThiCacDonVi+0x350>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b96      	cmp	r3, #150	; 0x96
 800073e:	d902      	bls.n	8000746 <HienThiCacDonVi+0x17a>
				{
					tempRange=20;
 8000740:	4b76      	ldr	r3, [pc, #472]	; (800091c <HienThiCacDonVi+0x350>)
 8000742:	2214      	movs	r2, #20
 8000744:	701a      	strb	r2, [r3, #0]
				}
			}
			if (debounce(GPIOB, GPIO_PIN_3)==1)
 8000746:	2108      	movs	r1, #8
 8000748:	4868      	ldr	r0, [pc, #416]	; (80008ec <HienThiCacDonVi+0x320>)
 800074a:	f7ff ff1f 	bl	800058c <debounce>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d11a      	bne.n	800078a <HienThiCacDonVi+0x1be>
			{
				tempRange--;
 8000754:	4b71      	ldr	r3, [pc, #452]	; (800091c <HienThiCacDonVi+0x350>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	3b01      	subs	r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b6f      	ldr	r3, [pc, #444]	; (800091c <HienThiCacDonVi+0x350>)
 8000760:	701a      	strb	r2, [r3, #0]
				Lcd_clear_xy(0,1);
 8000762:	2101      	movs	r1, #1
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff fdc7 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(1,1);
 800076a:	2101      	movs	r1, #1
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fdc3 	bl	80002f8 <Lcd_clear_xy>
				Lcd_clear_xy(2,1);
 8000772:	2101      	movs	r1, #1
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff fdbf 	bl	80002f8 <Lcd_clear_xy>
				if(tempRange<20)
 800077a:	4b68      	ldr	r3, [pc, #416]	; (800091c <HienThiCacDonVi+0x350>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b13      	cmp	r3, #19
 8000782:	d802      	bhi.n	800078a <HienThiCacDonVi+0x1be>
				{
					tempRange=150;
 8000784:	4b65      	ldr	r3, [pc, #404]	; (800091c <HienThiCacDonVi+0x350>)
 8000786:	2296      	movs	r2, #150	; 0x96
 8000788:	701a      	strb	r2, [r3, #0]
				}
			}
		}


		if(menu==2)
 800078a:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <HienThiCacDonVi+0x324>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b02      	cmp	r3, #2
 8000792:	d155      	bne.n	8000840 <HienThiCacDonVi+0x274>
			{
				Lcd_gotoxy(0, 0);
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff fd75 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("Gas range:");
 800079c:	4860      	ldr	r0, [pc, #384]	; (8000920 <HienThiCacDonVi+0x354>)
 800079e:	f7ff fd25 	bl	80001ec <Lcd_write_string>
				Lcd_gotoxy(0, 1);
 80007a2:	2101      	movs	r1, #1
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fd6e 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_int(gasRange);
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <HienThiCacDonVi+0x358>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd05 	bl	80001c0 <Lcd_write_int>
				Lcd_gotoxy(4, 1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff fd64 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("%");
 80007be:	4854      	ldr	r0, [pc, #336]	; (8000910 <HienThiCacDonVi+0x344>)
 80007c0:	f7ff fd14 	bl	80001ec <Lcd_write_string>
				if (debounce(GPIOB, GPIO_PIN_1)==1)
 80007c4:	2102      	movs	r1, #2
 80007c6:	4849      	ldr	r0, [pc, #292]	; (80008ec <HienThiCacDonVi+0x320>)
 80007c8:	f7ff fee0 	bl	800058c <debounce>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d11a      	bne.n	8000808 <HienThiCacDonVi+0x23c>
				{
					gasRange++;
 80007d2:	4b54      	ldr	r3, [pc, #336]	; (8000924 <HienThiCacDonVi+0x358>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b51      	ldr	r3, [pc, #324]	; (8000924 <HienThiCacDonVi+0x358>)
 80007de:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fd88 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff fd84 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(2,1);
 80007f0:	2101      	movs	r1, #1
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff fd80 	bl	80002f8 <Lcd_clear_xy>
					if(gasRange>100)
 80007f8:	4b4a      	ldr	r3, [pc, #296]	; (8000924 <HienThiCacDonVi+0x358>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b64      	cmp	r3, #100	; 0x64
 8000800:	d902      	bls.n	8000808 <HienThiCacDonVi+0x23c>
					{
						gasRange=0;
 8000802:	4b48      	ldr	r3, [pc, #288]	; (8000924 <HienThiCacDonVi+0x358>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
					}
				}
				if (debounce(GPIOB, GPIO_PIN_3)==1)
 8000808:	2108      	movs	r1, #8
 800080a:	4838      	ldr	r0, [pc, #224]	; (80008ec <HienThiCacDonVi+0x320>)
 800080c:	f7ff febe 	bl	800058c <debounce>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d114      	bne.n	8000840 <HienThiCacDonVi+0x274>
				{
					gasRange--;
 8000816:	4b43      	ldr	r3, [pc, #268]	; (8000924 <HienThiCacDonVi+0x358>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	3b01      	subs	r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b40      	ldr	r3, [pc, #256]	; (8000924 <HienThiCacDonVi+0x358>)
 8000822:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 8000824:	2101      	movs	r1, #1
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fd66 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 800082c:	2101      	movs	r1, #1
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff fd62 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(2,1);
 8000834:	2101      	movs	r1, #1
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff fd5e 	bl	80002f8 <Lcd_clear_xy>
					if(gasRange<0)
 800083c:	4b39      	ldr	r3, [pc, #228]	; (8000924 <HienThiCacDonVi+0x358>)
 800083e:	781b      	ldrb	r3, [r3, #0]
				}
			}



		if(menu==3)
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <HienThiCacDonVi+0x324>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b03      	cmp	r3, #3
 8000848:	d178      	bne.n	800093c <HienThiCacDonVi+0x370>
			{
				Lcd_gotoxy(0, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fd1a 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("Fire range:");
 8000852:	4835      	ldr	r0, [pc, #212]	; (8000928 <HienThiCacDonVi+0x35c>)
 8000854:	f7ff fcca 	bl	80001ec <Lcd_write_string>
				Lcd_gotoxy(0, 1);
 8000858:	2101      	movs	r1, #1
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fd13 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_int(fireRange);
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <HienThiCacDonVi+0x360>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcaa 	bl	80001c0 <Lcd_write_int>
				Lcd_gotoxy(4, 1);
 800086c:	2101      	movs	r1, #1
 800086e:	2004      	movs	r0, #4
 8000870:	f7ff fd09 	bl	8000286 <Lcd_gotoxy>
				Lcd_write_string("%");
 8000874:	4826      	ldr	r0, [pc, #152]	; (8000910 <HienThiCacDonVi+0x344>)
 8000876:	f7ff fcb9 	bl	80001ec <Lcd_write_string>
				if (debounce(GPIOB, GPIO_PIN_1)==1)
 800087a:	2102      	movs	r1, #2
 800087c:	481b      	ldr	r0, [pc, #108]	; (80008ec <HienThiCacDonVi+0x320>)
 800087e:	f7ff fe85 	bl	800058c <debounce>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d11a      	bne.n	80008be <HienThiCacDonVi+0x2f2>
				{
					fireRange++;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <HienThiCacDonVi+0x360>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <HienThiCacDonVi+0x360>)
 8000894:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd2d 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 800089e:	2101      	movs	r1, #1
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fd29 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(2,1);
 80008a6:	2101      	movs	r1, #1
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fd25 	bl	80002f8 <Lcd_clear_xy>
					if(fireRange>100)
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HienThiCacDonVi+0x360>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b64      	cmp	r3, #100	; 0x64
 80008b6:	d902      	bls.n	80008be <HienThiCacDonVi+0x2f2>
					{
						fireRange=0;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HienThiCacDonVi+0x360>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
					}
				}
				if (debounce(GPIOB, GPIO_PIN_3)==1)
 80008be:	2108      	movs	r1, #8
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <HienThiCacDonVi+0x320>)
 80008c2:	f7ff fe63 	bl	800058c <debounce>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d137      	bne.n	800093c <HienThiCacDonVi+0x370>
				{
					fireRange--;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <HienThiCacDonVi+0x360>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	3b01      	subs	r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HienThiCacDonVi+0x360>)
 80008d8:	701a      	strb	r2, [r3, #0]
					Lcd_clear_xy(0,1);
 80008da:	2101      	movs	r1, #1
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff fd0b 	bl	80002f8 <Lcd_clear_xy>
					Lcd_clear_xy(1,1);
 80008e2:	2101      	movs	r1, #1
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fd07 	bl	80002f8 <Lcd_clear_xy>
 80008ea:	e021      	b.n	8000930 <HienThiCacDonVi+0x364>
 80008ec:	40010c00 	.word	0x40010c00
 80008f0:	20000484 	.word	0x20000484
 80008f4:	20000462 	.word	0x20000462
 80008f8:	080065fc 	.word	0x080065fc
 80008fc:	20000464 	.word	0x20000464
 8000900:	2000045e 	.word	0x2000045e
 8000904:	20000460 	.word	0x20000460
 8000908:	08006604 	.word	0x08006604
 800090c:	08006608 	.word	0x08006608
 8000910:	0800660c 	.word	0x0800660c
 8000914:	08006610 	.word	0x08006610
 8000918:	08006614 	.word	0x08006614
 800091c:	20000018 	.word	0x20000018
 8000920:	08006620 	.word	0x08006620
 8000924:	2000001a 	.word	0x2000001a
 8000928:	0800662c 	.word	0x0800662c
 800092c:	20000019 	.word	0x20000019
					Lcd_clear_xy(2,1);
 8000930:	2101      	movs	r1, #1
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fce0 	bl	80002f8 <Lcd_clear_xy>
					if(fireRange<0)
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HienThiCacDonVi+0x388>)
 800093a:	781b      	ldrb	r3, [r3, #0]
			}




		if(menu>3)
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HienThiCacDonVi+0x38c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b03      	cmp	r3, #3
 8000944:	d902      	bls.n	800094c <HienThiCacDonVi+0x380>
		{
			menu=0;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HienThiCacDonVi+0x38c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
		}
	}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000019 	.word	0x20000019
 8000958:	20000484 	.word	0x20000484

0800095c <SendWarning>:



										/*   HAM GUI TIN HIEU SMS    */
void SendWarning()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
	const char* warningMsg1 = "AT+CMGS=\"0765214176\"\r\n";
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <SendWarning+0x74>)
 8000964:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1,(uint8_t*)warningMsg1,strlen(warningMsg1),HAL_MAX_DELAY);
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f7ff fbf2 	bl	8000150 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	68f9      	ldr	r1, [r7, #12]
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <SendWarning+0x78>)
 8000978:	f003 f8fe 	bl	8003b78 <HAL_UART_Transmit>
	HAL_Delay(5000);
 800097c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000980:	f000 fe30 	bl	80015e4 <HAL_Delay>
	const char* warningMsg2 = "WARNING VERY HIGH PRESS '1' TO SHUT DOWN\x1A\r\n";
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <SendWarning+0x7c>)
 8000986:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)warningMsg2, strlen(warningMsg2),HAL_MAX_DELAY);
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f7ff fbe1 	bl	8000150 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	480e      	ldr	r0, [pc, #56]	; (80009d4 <SendWarning+0x78>)
 800099a:	f003 f8ed 	bl	8003b78 <HAL_UART_Transmit>
	HAL_Delay(5000);
 800099e:	f241 3088 	movw	r0, #5000	; 0x1388
 80009a2:	f000 fe1f 	bl	80015e4 <HAL_Delay>
	const char* warningMsg3 = "AT+CMGD=1,4\r\n";
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <SendWarning+0x80>)
 80009a8:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)warningMsg3, strlen(warningMsg3),HAL_MAX_DELAY);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fbd0 	bl	8000150 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <SendWarning+0x78>)
 80009bc:	f003 f8dc 	bl	8003b78 <HAL_UART_Transmit>
	HAL_Delay(10000);
 80009c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80009c4:	f000 fe0e 	bl	80015e4 <HAL_Delay>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	08006638 	.word	0x08006638
 80009d4:	20000400 	.word	0x20000400
 80009d8:	08006650 	.word	0x08006650
 80009dc:	0800667c 	.word	0x0800667c

080009e0 <CanhBao>:


                                        /*    HAM CANH BAO MUC DO   */

int CanhBao (uint16_t a /*temp*/, uint16_t b /*gas*/, uint16_t c /*fire*/ )
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	460b      	mov	r3, r1
 80009ec:	80bb      	strh	r3, [r7, #4]
 80009ee:	4613      	mov	r3, r2
 80009f0:	807b      	strh	r3, [r7, #2]

	if (/*a >= tempRange ||*/ b >= gasRange || c >= fireRange)
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <CanhBao+0x40>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	88ba      	ldrh	r2, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d206      	bcs.n	8000a0e <CanhBao+0x2e>
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <CanhBao+0x44>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	887a      	ldrh	r2, [r7, #2]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d301      	bcc.n	8000a12 <CanhBao+0x32>
	{
		return 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <CanhBao+0x34>
	}
	else
	{
		return 0;
 8000a12:	2300      	movs	r3, #0
	}
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	2000001a 	.word	0x2000001a
 8000a24:	20000019 	.word	0x20000019

08000a28 <HAL_UART_RxCpltCallback>:


                           /*       NGAT NGOAI XAY RA KHI CO BUFFER NHAN VE     */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_RxCpltCallback+0x6c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d127      	bne.n	8000a8a <HAL_UART_RxCpltCallback+0x62>
  {
		  if (buff[1] == '1' && send == 1)
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <HAL_UART_RxCpltCallback+0x70>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	2b31      	cmp	r3, #49	; 0x31
 8000a40:	d11e      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x58>
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_UART_RxCpltCallback+0x74>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d119      	bne.n	8000a80 <HAL_UART_RxCpltCallback+0x58>
	          {
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <HAL_UART_RxCpltCallback+0x78>)
 8000a52:	f001 ffa4 	bl	800299e <HAL_GPIO_WritePin>
	              memset(buff, 0, sizeof(buff));
 8000a56:	220a      	movs	r2, #10
 8000a58:	2100      	movs	r1, #0
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <HAL_UART_RxCpltCallback+0x70>)
 8000a5c:	f005 f8d8 	bl	8005c10 <memset>
	              const char* warningMsg4 = "SYSTEM NOW OFF\n";
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_UART_RxCpltCallback+0x7c>)
 8000a62:	60fb      	str	r3, [r7, #12]
	              HAL_UART_Transmit(&huart1,(uint8_t *)warningMsg4,strlen(warningMsg4),HAL_MAX_DELAY);
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fb73 	bl	8000150 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	68f9      	ldr	r1, [r7, #12]
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_UART_RxCpltCallback+0x80>)
 8000a76:	f003 f87f 	bl	8003b78 <HAL_UART_Transmit>
	              resend = 1;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_UART_RxCpltCallback+0x84>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
	          }
	          HAL_UART_Receive_IT(&huart1, buff, sizeof(buff));
 8000a80:	220a      	movs	r2, #10
 8000a82:	4905      	ldr	r1, [pc, #20]	; (8000a98 <HAL_UART_RxCpltCallback+0x70>)
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <HAL_UART_RxCpltCallback+0x80>)
 8000a86:	f003 f8fa 	bl	8003c7e <HAL_UART_Receive_IT>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013800 	.word	0x40013800
 8000a98:	20000478 	.word	0x20000478
 8000a9c:	20000482 	.word	0x20000482
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	0800668c 	.word	0x0800668c
 8000aa8:	20000400 	.word	0x20000400
 8000aac:	20000483 	.word	0x20000483

08000ab0 <BuzzerSound>:



void BuzzerSound()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <BuzzerSound+0x6c>)
 8000aba:	f001 ff70 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000abe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac2:	f000 fd8f 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <BuzzerSound+0x6c>)
 8000acc:	f001 ff67 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ad0:	2064      	movs	r0, #100	; 0x64
 8000ad2:	f000 fd87 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4810      	ldr	r0, [pc, #64]	; (8000b1c <BuzzerSound+0x6c>)
 8000adc:	f001 ff5f 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ae0:	2064      	movs	r0, #100	; 0x64
 8000ae2:	f000 fd7f 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <BuzzerSound+0x6c>)
 8000aec:	f001 ff57 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000af0:	2064      	movs	r0, #100	; 0x64
 8000af2:	f000 fd77 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <BuzzerSound+0x6c>)
 8000afc:	f001 ff4f 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	f000 fd6f 	bl	80015e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <BuzzerSound+0x6c>)
 8000b0c:	f001 ff47 	bl	800299e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f000 fd67 	bl	80015e4 <HAL_Delay>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40010800 	.word	0x40010800

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b09c      	sub	sp, #112	; 0x70
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fd2b 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f87b 	bl	8000c24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Lcd_Init();
 8000b2e:	f7ff fb2f 	bl	8000190 <Lcd_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f000 f9a5 	bl	8000e80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b36:	f000 f985 	bl	8000e44 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b3a:	f000 f8cf 	bl	8000cdc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b3e:	f000 f957 	bl	8000df0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b42:	f000 f927 	bl	8000d94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  memset(buff, 0, sizeof(buff));
 8000b46:	220a      	movs	r2, #10
 8000b48:	2100      	movs	r1, #0
 8000b4a:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <main+0xd8>)
 8000b4c:	f005 f860 	bl	8005c10 <memset>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) var, 3);
 8000b50:	2203      	movs	r2, #3
 8000b52:	492a      	ldr	r1, [pc, #168]	; (8000bfc <main+0xdc>)
 8000b54:	482a      	ldr	r0, [pc, #168]	; (8000c00 <main+0xe0>)
 8000b56:	f000 fe41 	bl	80017dc <HAL_ADC_Start_DMA>
//  HAL_UART_Receive_IT(&huart1, buff, 1);
  Lcd_clear_display();
 8000b5a:	f7ff fb64 	bl	8000226 <Lcd_clear_display>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Tast01 */
  osThreadDef(Tast01, DisplayLCD, osPriorityNormal, 0, 128);
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <main+0xe4>)
 8000b60:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b64:	461d      	mov	r5, r3
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Tast01Handle = osThreadCreate(osThread(Tast01), NULL);
 8000b72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fe43 	bl	8004804 <osThreadCreate>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <main+0xe8>)
 8000b82:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Warning, osPriorityNormal, 0, 128);
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <main+0xec>)
 8000b86:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 fe30 	bl	8004804 <osThreadCreate>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <main+0xf0>)
 8000ba8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, TogglePin, osPriorityNormal, 0, 128);
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <main+0xf4>)
 8000bac:	f107 041c 	add.w	r4, r7, #28
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fe1d 	bl	8004804 <osThreadCreate>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <main+0xf8>)
 8000bce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, ReadADC, osPriorityNormal, 0, 128);
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <main+0xfc>)
 8000bd2:	463c      	mov	r4, r7
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000be2:	463b      	mov	r3, r7
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fe0c 	bl	8004804 <osThreadCreate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <main+0x100>)
 8000bf0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bf2:	f003 fe00 	bl	80047f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <main+0xd6>
 8000bf8:	20000478 	.word	0x20000478
 8000bfc:	20000458 	.word	0x20000458
 8000c00:	20000338 	.word	0x20000338
 8000c04:	080066a4 	.word	0x080066a4
 8000c08:	20000448 	.word	0x20000448
 8000c0c:	080066c8 	.word	0x080066c8
 8000c10:	2000044c 	.word	0x2000044c
 8000c14:	080066ec 	.word	0x080066ec
 8000c18:	20000450 	.word	0x20000450
 8000c1c:	08006710 	.word	0x08006710
 8000c20:	20000454 	.word	0x20000454

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2e:	2228      	movs	r2, #40	; 0x28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 ffec 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	2301      	movs	r3, #1
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 ffec 	bl	8002c58 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c86:	f000 fa29 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fa58 	bl	800315c <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cb2:	f000 fa13 	bl	80010dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fc08 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cce:	f000 fa05 	bl	80010dc <Error_Handler>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cec:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000cee:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d08:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d1c:	f000 fc86 	bl	800162c <HAL_ADC_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d26:	f000 f9d9 	bl	80010dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d32:	2307      	movs	r3, #7
 8000d34:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d3c:	f000 ff10 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 f9c9 	bl	80010dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d58:	f000 ff02 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d62:	f000 f9bb 	bl	80010dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_ADC1_Init+0xb0>)
 8000d74:	f000 fef4 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d7e:	f000 f9ad 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000338 	.word	0x20000338
 8000d90:	40012400 	.word	0x40012400

08000d94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <MX_I2C1_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_I2C1_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_I2C1_Init+0x50>)
 8000dd2:	f001 fdfd 	bl	80029d0 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 f97e 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200003ac 	.word	0x200003ac
 8000de8:	40005400 	.word	0x40005400
 8000dec:	000186a0 	.word	0x000186a0

08000df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_USART1_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e28:	f002 fe56 	bl	8003ad8 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f000 f953 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000400 	.word	0x20000400
 8000e40:	40013800 	.word	0x40013800

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_DMA_Init+0x38>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <MX_DMA_Init+0x38>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_DMA_Init+0x38>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2105      	movs	r1, #5
 8000e66:	200b      	movs	r0, #11
 8000e68:	f001 f931 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e6c:	200b      	movs	r0, #11
 8000e6e:	f001 f94a 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_GPIO_Init+0xac>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000ee2:	f001 fd5c 	bl	800299e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000eec:	f001 fd57 	bl	800299e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ef0:	2360      	movs	r3, #96	; 0x60
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2302      	movs	r3, #2
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000f08:	f001 fbae 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000f0c:	230b      	movs	r3, #11
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_GPIO_Init+0xb4>)
 8000f20:	f001 fba2 	bl	8002668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40010c00 	.word	0x40010c00

08000f38 <DisplayLCD>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DisplayLCD */
void DisplayLCD(void const * argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HienThiCacDonVi();
 8000f40:	f7ff fb44 	bl	80005cc <HienThiCacDonVi>
    osDelay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f003 fca9 	bl	800489c <osDelay>
	HienThiCacDonVi();
 8000f4a:	e7f9      	b.n	8000f40 <DisplayLCD+0x8>

08000f4c <Warning>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Warning */
void Warning(void const * argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Warning */
	HAL_UART_Receive_IT(&huart1, buff, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	490d      	ldr	r1, [pc, #52]	; (8000f8c <Warning+0x40>)
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <Warning+0x44>)
 8000f5a:	f002 fe90 	bl	8003c7e <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1  && resend == 0)
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <Warning+0x48>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <Warning+0x4c>)
 8000f64:	8811      	ldrh	r1, [r2, #0]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <Warning+0x50>)
 8000f68:	8812      	ldrh	r2, [r2, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fd38 	bl	80009e0 <CanhBao>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d106      	bne.n	8000f84 <Warning+0x38>
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <Warning+0x54>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <Warning+0x38>
	{
			SendWarning();
 8000f80:	f7ff fcec 	bl	800095c <SendWarning>
	}
    osDelay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f003 fc89 	bl	800489c <osDelay>
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1  && resend == 0)
 8000f8a:	e7e8      	b.n	8000f5e <Warning+0x12>
 8000f8c:	20000478 	.word	0x20000478
 8000f90:	20000400 	.word	0x20000400
 8000f94:	20000462 	.word	0x20000462
 8000f98:	2000045e 	.word	0x2000045e
 8000f9c:	20000460 	.word	0x20000460
 8000fa0:	20000483 	.word	0x20000483

08000fa4 <TogglePin>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TogglePin */
void TogglePin(void const * argument)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TogglePin */
  /* Infinite loop */
  for(;;)
  {
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1)
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <TogglePin+0x70>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	; (8001018 <TogglePin+0x74>)
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <TogglePin+0x78>)
 8000fb6:	8812      	ldrh	r2, [r2, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fd11 	bl	80009e0 <CanhBao>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10e      	bne.n	8000fe2 <TogglePin+0x3e>
	{
		if(resend == 1)
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <TogglePin+0x7c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d103      	bne.n	8000fd6 <TogglePin+0x32>
		{
			send=0;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <TogglePin+0x80>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e019      	b.n	800100a <TogglePin+0x66>
		}
		else
		{
			BuzzerSound();
 8000fd6:	f7ff fd6b 	bl	8000ab0 <BuzzerSound>
			send=1;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <TogglePin+0x80>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e013      	b.n	800100a <TogglePin+0x66>
		}
	}
	else if(CanhBao(tempVariable,gasVariable,fireVariable) == 0)
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <TogglePin+0x70>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <TogglePin+0x74>)
 8000fe8:	8811      	ldrh	r1, [r2, #0]
 8000fea:	4a0c      	ldr	r2, [pc, #48]	; (800101c <TogglePin+0x78>)
 8000fec:	8812      	ldrh	r2, [r2, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fcf6 	bl	80009e0 <CanhBao>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d107      	bne.n	800100a <TogglePin+0x66>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	480a      	ldr	r0, [pc, #40]	; (8001028 <TogglePin+0x84>)
 8001000:	f001 fccd 	bl	800299e <HAL_GPIO_WritePin>
		send=0;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <TogglePin+0x80>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f003 fc46 	bl	800489c <osDelay>
	if(CanhBao(tempVariable,gasVariable,fireVariable) == 1)
 8001010:	e7cc      	b.n	8000fac <TogglePin+0x8>
 8001012:	bf00      	nop
 8001014:	20000462 	.word	0x20000462
 8001018:	2000045e 	.word	0x2000045e
 800101c:	20000460 	.word	0x20000460
 8001020:	20000483 	.word	0x20000483
 8001024:	20000482 	.word	0x20000482
 8001028:	40010800 	.word	0x40010800

0800102c <ReadADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadADC */
void ReadADC(void const * argument)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadADC */
  /* Infinite loop */
  for(;;)
  {
	tempVariable=((var[0]*500)/4095);
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <ReadADC+0x78>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <ReadADC+0x7c>)
 8001044:	fb82 1203 	smull	r1, r2, r2, r3
 8001048:	441a      	add	r2, r3
 800104a:	12d2      	asrs	r2, r2, #11
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <ReadADC+0x80>)
 8001054:	801a      	strh	r2, [r3, #0]
	gasVariable=((var[1] * 100) / 4095);
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <ReadADC+0x78>)
 8001058:	885b      	ldrh	r3, [r3, #2]
 800105a:	461a      	mov	r2, r3
 800105c:	2364      	movs	r3, #100	; 0x64
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <ReadADC+0x7c>)
 8001064:	fb82 1203 	smull	r1, r2, r2, r3
 8001068:	441a      	add	r2, r3
 800106a:	12d2      	asrs	r2, r2, #11
 800106c:	17db      	asrs	r3, r3, #31
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <ReadADC+0x84>)
 8001074:	801a      	strh	r2, [r3, #0]
	fireVariable=(((4095 - var[2]) * 100) / 4095);
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <ReadADC+0x78>)
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800107e:	330f      	adds	r3, #15
 8001080:	2264      	movs	r2, #100	; 0x64
 8001082:	fb02 f303 	mul.w	r3, r2, r3
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <ReadADC+0x7c>)
 8001088:	fb82 1203 	smull	r1, r2, r2, r3
 800108c:	441a      	add	r2, r3
 800108e:	12d2      	asrs	r2, r2, #11
 8001090:	17db      	asrs	r3, r3, #31
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <ReadADC+0x88>)
 8001098:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800109a:	2001      	movs	r0, #1
 800109c:	f003 fbfe 	bl	800489c <osDelay>
	tempVariable=((var[0]*500)/4095);
 80010a0:	e7c8      	b.n	8001034 <ReadADC+0x8>
 80010a2:	bf00      	nop
 80010a4:	20000458 	.word	0x20000458
 80010a8:	80080081 	.word	0x80080081
 80010ac:	20000462 	.word	0x20000462
 80010b0:	2000045e 	.word	0x2000045e
 80010b4:	20000460 	.word	0x20000460

080010b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ca:	f000 fa6f 	bl	80015ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012c00 	.word	0x40012c00

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010e4:	e7fe      	b.n	80010e4 <Error_Handler+0x8>
	...

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_MspInit+0x68>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_MspInit+0x68>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_MspInit+0x68>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_MspInit+0x68>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <HAL_MspInit+0x68>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_MspInit+0x68>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	f06f 0001 	mvn.w	r0, #1
 8001126:	f000 ffd2 	bl	80020ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_MspInit+0x6c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_MspInit+0x6c>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a2c      	ldr	r2, [pc, #176]	; (8001224 <HAL_ADC_MspInit+0xcc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d151      	bne.n	800121c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_ADC_MspInit+0xd0>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <HAL_ADC_MspInit+0xd0>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <HAL_ADC_MspInit+0xd0>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_ADC_MspInit+0xd0>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a24      	ldr	r2, [pc, #144]	; (8001228 <HAL_ADC_MspInit+0xd0>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_ADC_MspInit+0xd0>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011a8:	2307      	movs	r3, #7
 80011aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ac:	2303      	movs	r3, #3
 80011ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	481d      	ldr	r0, [pc, #116]	; (800122c <HAL_ADC_MspInit+0xd4>)
 80011b8:	f001 fa56 	bl	8002668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_ADC_MspInit+0xdc>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011e6:	2220      	movs	r2, #32
 80011e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011f0:	480f      	ldr	r0, [pc, #60]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 80011f2:	f000 ff97 	bl	8002124 <HAL_DMA_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80011fc:	f7ff ff6e 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 8001204:	621a      	str	r2, [r3, #32]
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_ADC_MspInit+0xd8>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2012      	movs	r0, #18
 8001212:	f000 ff5c 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001216:	2012      	movs	r0, #18
 8001218:	f000 ff75 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40012400 	.word	0x40012400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800
 8001230:	20000368 	.word	0x20000368
 8001234:	40020008 	.word	0x40020008

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_I2C_MspInit+0x70>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d123      	bne.n	80012a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_I2C_MspInit+0x74>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <HAL_I2C_MspInit+0x78>)
 8001284:	f001 f9f0 	bl	8002668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800128e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001292:	61d3      	str	r3, [r2, #28]
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_I2C_MspInit+0x74>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40005400 	.word	0x40005400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a20      	ldr	r2, [pc, #128]	; (8001350 <HAL_UART_MspInit+0x9c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d139      	bne.n	8001348 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_UART_MspInit+0xa0>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <HAL_UART_MspInit+0xa4>)
 800131a:	f001 f9a5 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800131e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001322:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <HAL_UART_MspInit+0xa4>)
 8001334:	f001 f998 	bl	8002668 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2025      	movs	r0, #37	; 0x25
 800133e:	f000 fec6 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001342:	2025      	movs	r0, #37	; 0x25
 8001344:	f000 fedf 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40013800 	.word	0x40013800
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800

0800135c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_InitTick+0xd0>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <HAL_InitTick+0xd0>)
 8001378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_InitTick+0xd0>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800138a:	f107 020c 	add.w	r2, r7, #12
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f851 	bl	800343c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800139a:	f002 f83b 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 800139e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_InitTick+0xd4>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	3b01      	subs	r3, #1
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_InitTick+0xd8>)
 80013b0:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_InitTick+0xdc>)
 80013b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_InitTick+0xd8>)
 80013b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <HAL_InitTick+0xd8>)
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_InitTick+0xd8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_InitTick+0xd8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_InitTick+0xd8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013d4:	4817      	ldr	r0, [pc, #92]	; (8001434 <HAL_InitTick+0xd8>)
 80013d6:	f002 f935 	bl	8003644 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80013e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d11b      	bne.n	8001420 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <HAL_InitTick+0xd8>)
 80013ea:	f002 f983 	bl	80036f4 <HAL_TIM_Base_Start_IT>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80013f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d111      	bne.n	8001420 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013fc:	2019      	movs	r0, #25
 80013fe:	f000 fe82 	bl	8002106 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d808      	bhi.n	800141a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	2019      	movs	r0, #25
 800140e:	f000 fe5e 	bl	80020ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_InitTick+0xe0>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e002      	b.n	8001420 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001424:	4618      	mov	r0, r3
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	431bde83 	.word	0x431bde83
 8001434:	20000488 	.word	0x20000488
 8001438:	40012c00 	.word	0x40012c00
 800143c:	20000020 	.word	0x20000020

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Channel1_IRQHandler+0x10>)
 8001472:	f000 ffc5 	bl	8002400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000368 	.word	0x20000368

08001480 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <ADC1_2_IRQHandler+0x10>)
 8001486:	f000 fa87 	bl	8001998 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000338 	.word	0x20000338

08001494 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM1_UP_IRQHandler+0x10>)
 800149a:	f002 f97d 	bl	8003798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000488 	.word	0x20000488

080014a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <USART1_IRQHandler+0x10>)
 80014ae:	f002 fc0b 	bl	8003cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000400 	.word	0x20000400

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f004 fbee 	bl	8005ccc <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20005000 	.word	0x20005000
 800151c:	00000400 	.word	0x00000400
 8001520:	200004d0 	.word	0x200004d0
 8001524:	20001370 	.word	0x20001370

08001528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff fff8 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001550:	4c09      	ldr	r4, [pc, #36]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f004 fbbb 	bl	8005cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff fadd 	bl	8000b20 <main>
  bx lr
 8001566:	4770      	bx	lr
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001570:	0800679c 	.word	0x0800679c
  ldr r2, =_sbss
 8001574:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001578:	2000136c 	.word	0x2000136c

0800157c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <CAN1_RX1_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x28>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 fd91 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f7ff fee0 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fda4 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x20>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000024 	.word	0x20000024
 80015cc:	200004d4 	.word	0x200004d4

080015d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	200004d4 	.word	0x200004d4

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff fff0 	bl	80015d0 <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffe0 	bl	80015d0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000024 	.word	0x20000024

0800162c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0be      	b.n	80017cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd74 	bl	8001158 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fbc7 	bl	8001e04 <ADC_ConversionStop_Disable>
 8001676:	4603      	mov	r3, r0
 8001678:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8099 	bne.w	80017ba <HAL_ADC_Init+0x18e>
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 8095 	bne.w	80017ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001698:	f023 0302 	bic.w	r3, r3, #2
 800169c:	f043 0202 	orr.w	r2, r3, #2
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7b1b      	ldrb	r3, [r3, #12]
 80016b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d003      	beq.n	80016ce <HAL_ADC_Init+0xa2>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <HAL_ADC_Init+0xa8>
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	e000      	b.n	80016d6 <HAL_ADC_Init+0xaa>
 80016d4:	2300      	movs	r3, #0
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7d1b      	ldrb	r3, [r3, #20]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d119      	bne.n	8001718 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7b1b      	ldrb	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d109      	bne.n	8001700 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	035a      	lsls	r2, r3, #13
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	e00b      	b.n	8001718 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f043 0220 	orr.w	r2, r3, #32
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f043 0201 	orr.w	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	430a      	orrs	r2, r1
 800172a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_ADC_Init+0x1a8>)
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	430b      	orrs	r3, r1
 800173e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001748:	d003      	beq.n	8001752 <HAL_ADC_Init+0x126>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d104      	bne.n	800175c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	3b01      	subs	r3, #1
 8001758:	051b      	lsls	r3, r3, #20
 800175a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	430a      	orrs	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_ADC_Init+0x1ac>)
 8001778:	4013      	ands	r3, r2
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	429a      	cmp	r2, r3
 800177e:	d10b      	bne.n	8001798 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001796:	e018      	b.n	80017ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f023 0312 	bic.w	r3, r3, #18
 80017a0:	f043 0210 	orr.w	r2, r3, #16
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b8:	e007      	b.n	80017ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f043 0210 	orr.w	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	ffe1f7fd 	.word	0xffe1f7fd
 80017d8:	ff1f0efe 	.word	0xff1f0efe

080017dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a64      	ldr	r2, [pc, #400]	; (8001984 <HAL_ADC_Start_DMA+0x1a8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d004      	beq.n	8001800 <HAL_ADC_Start_DMA+0x24>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_ADC_Start_DMA+0x1ac>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d106      	bne.n	800180e <HAL_ADC_Start_DMA+0x32>
 8001800:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_ADC_Start_DMA+0x1a8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 80b3 	bne.w	8001974 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_Start_DMA+0x40>
 8001818:	2302      	movs	r3, #2
 800181a:	e0ae      	b.n	800197a <HAL_ADC_Start_DMA+0x19e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fa93 	bl	8001d50 <ADC_Enable>
 800182a:	4603      	mov	r3, r0
 800182c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 809a 	bne.w	800196a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a4e      	ldr	r2, [pc, #312]	; (8001988 <HAL_ADC_Start_DMA+0x1ac>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d105      	bne.n	8001860 <HAL_ADC_Start_DMA+0x84>
 8001854:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_ADC_Start_DMA+0x1a8>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d115      	bne.n	800188c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	2b00      	cmp	r3, #0
 8001878:	d026      	beq.n	80018c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188a:	e01d      	b.n	80018c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a39      	ldr	r2, [pc, #228]	; (8001984 <HAL_ADC_Start_DMA+0x1a8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d004      	beq.n	80018ac <HAL_ADC_Start_DMA+0xd0>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_ADC_Start_DMA+0x1ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d10d      	bne.n	80018c8 <HAL_ADC_Start_DMA+0xec>
 80018ac:	4b35      	ldr	r3, [pc, #212]	; (8001984 <HAL_ADC_Start_DMA+0x1a8>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f023 0206 	bic.w	r2, r3, #6
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_ADC_Start_DMA+0x1b0>)
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <HAL_ADC_Start_DMA+0x1b4>)
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a23      	ldr	r2, [pc, #140]	; (8001994 <HAL_ADC_Start_DMA+0x1b8>)
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0202 	mvn.w	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001920:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a18      	ldr	r0, [r3, #32]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	334c      	adds	r3, #76	; 0x4c
 800192c:	4619      	mov	r1, r3
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f000 fc51 	bl	80021d8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001940:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001944:	d108      	bne.n	8001958 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001954:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001956:	e00f      	b.n	8001978 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001966:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001968:	e006      	b.n	8001978 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001972:	e001      	b.n	8001978 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001978:	7dfb      	ldrb	r3, [r7, #23]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40012400 	.word	0x40012400
 8001988:	40012800 	.word	0x40012800
 800198c:	08001e87 	.word	0x08001e87
 8001990:	08001f03 	.word	0x08001f03
 8001994:	08001f1f 	.word	0x08001f1f

08001998 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d03e      	beq.n	8001a38 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d039      	beq.n	8001a38 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019ea:	d11d      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d119      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0220 	bic.w	r2, r2, #32
 8001a02:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f874 	bl	8001b16 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f06f 0212 	mvn.w	r2, #18
 8001a36:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04d      	beq.n	8001ade <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d048      	beq.n	8001ade <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001a6e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001a72:	d012      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d125      	bne.n	8001ace <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a90:	d11d      	bne.n	8001ace <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa3f 	bl	8001f52 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 020c 	mvn.w	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d012      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00d      	beq.n	8001b0e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f81b 	bl	8001b3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0201 	mvn.w	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x20>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e0dc      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1da>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d81c      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b05      	subs	r3, #5
 8001ba2:	221f      	movs	r2, #31
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4019      	ands	r1, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b05      	subs	r3, #5
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc8:	e03c      	b.n	8001c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d81c      	bhi.n	8001c0c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b23      	subs	r3, #35	; 0x23
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4019      	ands	r1, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b23      	subs	r3, #35	; 0x23
 8001bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0a:	e01b      	b.n	8001c44 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	; 0x41
 8001c1e:	221f      	movs	r2, #31
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4019      	ands	r1, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b41      	subs	r3, #65	; 0x41
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d91c      	bls.n	8001c86 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b1e      	subs	r3, #30
 8001c5e:	2207      	movs	r2, #7
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4019      	ands	r1, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6898      	ldr	r0, [r3, #8]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	3b1e      	subs	r3, #30
 8001c78:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	e019      	b.n	8001cba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6919      	ldr	r1, [r3, #16]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	2207      	movs	r2, #7
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6898      	ldr	r0, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d132      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_ADC_ConfigChannel+0x1e4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d125      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d126      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cf0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d11a      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_ADC_ConfigChannel+0x1ec>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	0c9a      	lsrs	r2, r3, #18
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x1b2>
 8001d1e:	e007      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40012400 	.word	0x40012400
 8001d48:	2000001c 	.word	0x2000001c
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d040      	beq.n	8001df0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <ADC_Enable+0xac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <ADC_Enable+0xb0>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9b      	lsrs	r3, r3, #18
 8001d8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d8c:	e002      	b.n	8001d94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f9      	bne.n	8001d8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d9a:	f7ff fc19 	bl	80015d0 <HAL_GetTick>
 8001d9e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001da0:	e01f      	b.n	8001de2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001da2:	f7ff fc15 	bl	80015d0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d918      	bls.n	8001de2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d011      	beq.n	8001de2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	f043 0210 	orr.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e007      	b.n	8001df2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d1d8      	bne.n	8001da2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000001c 	.word	0x2000001c
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d12e      	bne.n	8001e7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e2e:	f7ff fbcf 	bl	80015d0 <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e34:	e01b      	b.n	8001e6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e36:	f7ff fbcb 	bl	80015d0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d914      	bls.n	8001e6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10d      	bne.n	8001e6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d0dc      	beq.n	8001e36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d127      	bne.n	8001ef0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eba:	d115      	bne.n	8001ee8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d111      	bne.n	8001ee8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff fe14 	bl	8001b16 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001eee:	e004      	b.n	8001efa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fe09 	bl	8001b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f043 0204 	orr.w	r2, r3, #4
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7ff fe01 	bl	8001b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4906      	ldr	r1, [pc, #24]	; (8001ffc <__NVIC_EnableIRQ+0x34>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff4f 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff64 	bl	8001fac <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ffb2 	bl	8002054 <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff81 	bl	8002000 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff57 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e043      	b.n	80021c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_DMA_Init+0xa8>)
 8002142:	4413      	add	r3, r2
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_DMA_Init+0xac>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	009a      	lsls	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_DMA_Init+0xb0>)
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800216e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002172:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800217c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	bffdfff8 	.word	0xbffdfff8
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	40020000 	.word	0x40020000

080021d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_DMA_Start_IT+0x20>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e04b      	b.n	8002290 <HAL_DMA_Start_IT+0xb8>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d13a      	bne.n	8002282 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f9eb 	bl	800260c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 020e 	orr.w	r2, r2, #14
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e00f      	b.n	8002270 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 020a 	orr.w	r2, r2, #10
 800226e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e005      	b.n	800228e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800228a:	2302      	movs	r3, #2
 800228c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800228e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e020      	b.n	8002304 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020e 	bic.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
	...

08002310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d005      	beq.n	8002334 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2204      	movs	r2, #4
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e051      	b.n	80023d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 020e 	bic.w	r2, r2, #14
 8002342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <HAL_DMA_Abort_IT+0xd4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d029      	beq.n	80023b2 <HAL_DMA_Abort_IT+0xa2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <HAL_DMA_Abort_IT+0xd8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d022      	beq.n	80023ae <HAL_DMA_Abort_IT+0x9e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_DMA_Abort_IT+0xdc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01a      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x98>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_DMA_Abort_IT+0xe0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d012      	beq.n	80023a2 <HAL_DMA_Abort_IT+0x92>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1c      	ldr	r2, [pc, #112]	; (80023f4 <HAL_DMA_Abort_IT+0xe4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00a      	beq.n	800239c <HAL_DMA_Abort_IT+0x8c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <HAL_DMA_Abort_IT+0xe8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d102      	bne.n	8002396 <HAL_DMA_Abort_IT+0x86>
 8002390:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002394:	e00e      	b.n	80023b4 <HAL_DMA_Abort_IT+0xa4>
 8002396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800239a:	e00b      	b.n	80023b4 <HAL_DMA_Abort_IT+0xa4>
 800239c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a0:	e008      	b.n	80023b4 <HAL_DMA_Abort_IT+0xa4>
 80023a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a6:	e005      	b.n	80023b4 <HAL_DMA_Abort_IT+0xa4>
 80023a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ac:	e002      	b.n	80023b4 <HAL_DMA_Abort_IT+0xa4>
 80023ae:	2310      	movs	r3, #16
 80023b0:	e000      	b.n	80023b4 <HAL_DMA_Abort_IT+0xa4>
 80023b2:	2301      	movs	r3, #1
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_DMA_Abort_IT+0xec>)
 80023b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4798      	blx	r3
    } 
  }
  return status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40020008 	.word	0x40020008
 80023e8:	4002001c 	.word	0x4002001c
 80023ec:	40020030 	.word	0x40020030
 80023f0:	40020044 	.word	0x40020044
 80023f4:	40020058 	.word	0x40020058
 80023f8:	4002006c 	.word	0x4002006c
 80023fc:	40020000 	.word	0x40020000

08002400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2204      	movs	r2, #4
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d04f      	beq.n	80024c8 <HAL_DMA_IRQHandler+0xc8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04a      	beq.n	80024c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_DMA_IRQHandler+0x1f0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d029      	beq.n	80024ae <HAL_DMA_IRQHandler+0xae>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a65      	ldr	r2, [pc, #404]	; (80025f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_IRQHandler+0xaa>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_DMA_IRQHandler+0x1f8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01a      	beq.n	80024a4 <HAL_DMA_IRQHandler+0xa4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a62      	ldr	r2, [pc, #392]	; (80025fc <HAL_DMA_IRQHandler+0x1fc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d012      	beq.n	800249e <HAL_DMA_IRQHandler+0x9e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a60      	ldr	r2, [pc, #384]	; (8002600 <HAL_DMA_IRQHandler+0x200>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00a      	beq.n	8002498 <HAL_DMA_IRQHandler+0x98>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5f      	ldr	r2, [pc, #380]	; (8002604 <HAL_DMA_IRQHandler+0x204>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d102      	bne.n	8002492 <HAL_DMA_IRQHandler+0x92>
 800248c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002490:	e00e      	b.n	80024b0 <HAL_DMA_IRQHandler+0xb0>
 8002492:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002496:	e00b      	b.n	80024b0 <HAL_DMA_IRQHandler+0xb0>
 8002498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800249c:	e008      	b.n	80024b0 <HAL_DMA_IRQHandler+0xb0>
 800249e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a2:	e005      	b.n	80024b0 <HAL_DMA_IRQHandler+0xb0>
 80024a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a8:	e002      	b.n	80024b0 <HAL_DMA_IRQHandler+0xb0>
 80024aa:	2340      	movs	r3, #64	; 0x40
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_IRQHandler+0xb0>
 80024ae:	2304      	movs	r3, #4
 80024b0:	4a55      	ldr	r2, [pc, #340]	; (8002608 <HAL_DMA_IRQHandler+0x208>)
 80024b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8094 	beq.w	80025e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024c6:	e08e      	b.n	80025e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	2202      	movs	r2, #2
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d056      	beq.n	8002586 <HAL_DMA_IRQHandler+0x186>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d051      	beq.n	8002586 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 020a 	bic.w	r2, r2, #10
 80024fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <HAL_DMA_IRQHandler+0x1f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d029      	beq.n	8002566 <HAL_DMA_IRQHandler+0x166>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <HAL_DMA_IRQHandler+0x1f4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d022      	beq.n	8002562 <HAL_DMA_IRQHandler+0x162>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a35      	ldr	r2, [pc, #212]	; (80025f8 <HAL_DMA_IRQHandler+0x1f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01a      	beq.n	800255c <HAL_DMA_IRQHandler+0x15c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a34      	ldr	r2, [pc, #208]	; (80025fc <HAL_DMA_IRQHandler+0x1fc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d012      	beq.n	8002556 <HAL_DMA_IRQHandler+0x156>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a32      	ldr	r2, [pc, #200]	; (8002600 <HAL_DMA_IRQHandler+0x200>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00a      	beq.n	8002550 <HAL_DMA_IRQHandler+0x150>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_DMA_IRQHandler+0x204>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d102      	bne.n	800254a <HAL_DMA_IRQHandler+0x14a>
 8002544:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002548:	e00e      	b.n	8002568 <HAL_DMA_IRQHandler+0x168>
 800254a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800254e:	e00b      	b.n	8002568 <HAL_DMA_IRQHandler+0x168>
 8002550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002554:	e008      	b.n	8002568 <HAL_DMA_IRQHandler+0x168>
 8002556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255a:	e005      	b.n	8002568 <HAL_DMA_IRQHandler+0x168>
 800255c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002560:	e002      	b.n	8002568 <HAL_DMA_IRQHandler+0x168>
 8002562:	2320      	movs	r3, #32
 8002564:	e000      	b.n	8002568 <HAL_DMA_IRQHandler+0x168>
 8002566:	2302      	movs	r3, #2
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_DMA_IRQHandler+0x208>)
 800256a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d034      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002584:	e02f      	b.n	80025e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2208      	movs	r2, #8
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d028      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x1e8>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 020e 	bic.w	r2, r2, #14
 80025ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
    }
  }
  return;
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
}
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40020008 	.word	0x40020008
 80025f4:	4002001c 	.word	0x4002001c
 80025f8:	40020030 	.word	0x40020030
 80025fc:	40020044 	.word	0x40020044
 8002600:	40020058 	.word	0x40020058
 8002604:	4002006c 	.word	0x4002006c
 8002608:	40020000 	.word	0x40020000

0800260c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d108      	bne.n	800264c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800264a:	e007      	b.n	800265c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	60da      	str	r2, [r3, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
	...

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b08b      	sub	sp, #44	; 0x2c
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267a:	e169      	b.n	8002950 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800267c:	2201      	movs	r2, #1
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 8158 	bne.w	800294a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a9a      	ldr	r2, [pc, #616]	; (8002908 <HAL_GPIO_Init+0x2a0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d05e      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026a4:	4a98      	ldr	r2, [pc, #608]	; (8002908 <HAL_GPIO_Init+0x2a0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d875      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026aa:	4a98      	ldr	r2, [pc, #608]	; (800290c <HAL_GPIO_Init+0x2a4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d058      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026b0:	4a96      	ldr	r2, [pc, #600]	; (800290c <HAL_GPIO_Init+0x2a4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d86f      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026b6:	4a96      	ldr	r2, [pc, #600]	; (8002910 <HAL_GPIO_Init+0x2a8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d052      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026bc:	4a94      	ldr	r2, [pc, #592]	; (8002910 <HAL_GPIO_Init+0x2a8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d869      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026c2:	4a94      	ldr	r2, [pc, #592]	; (8002914 <HAL_GPIO_Init+0x2ac>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04c      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026c8:	4a92      	ldr	r2, [pc, #584]	; (8002914 <HAL_GPIO_Init+0x2ac>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d863      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026ce:	4a92      	ldr	r2, [pc, #584]	; (8002918 <HAL_GPIO_Init+0x2b0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d046      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
 80026d4:	4a90      	ldr	r2, [pc, #576]	; (8002918 <HAL_GPIO_Init+0x2b0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d85d      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d82a      	bhi.n	8002734 <HAL_GPIO_Init+0xcc>
 80026de:	2b12      	cmp	r3, #18
 80026e0:	d859      	bhi.n	8002796 <HAL_GPIO_Init+0x12e>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <HAL_GPIO_Init+0x80>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	08002763 	.word	0x08002763
 80026ec:	0800273d 	.word	0x0800273d
 80026f0:	0800274f 	.word	0x0800274f
 80026f4:	08002791 	.word	0x08002791
 80026f8:	08002797 	.word	0x08002797
 80026fc:	08002797 	.word	0x08002797
 8002700:	08002797 	.word	0x08002797
 8002704:	08002797 	.word	0x08002797
 8002708:	08002797 	.word	0x08002797
 800270c:	08002797 	.word	0x08002797
 8002710:	08002797 	.word	0x08002797
 8002714:	08002797 	.word	0x08002797
 8002718:	08002797 	.word	0x08002797
 800271c:	08002797 	.word	0x08002797
 8002720:	08002797 	.word	0x08002797
 8002724:	08002797 	.word	0x08002797
 8002728:	08002797 	.word	0x08002797
 800272c:	08002745 	.word	0x08002745
 8002730:	08002759 	.word	0x08002759
 8002734:	4a79      	ldr	r2, [pc, #484]	; (800291c <HAL_GPIO_Init+0x2b4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800273a:	e02c      	b.n	8002796 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	623b      	str	r3, [r7, #32]
          break;
 8002742:	e029      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	3304      	adds	r3, #4
 800274a:	623b      	str	r3, [r7, #32]
          break;
 800274c:	e024      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	3308      	adds	r3, #8
 8002754:	623b      	str	r3, [r7, #32]
          break;
 8002756:	e01f      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	330c      	adds	r3, #12
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e01a      	b.n	8002798 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800276a:	2304      	movs	r3, #4
 800276c:	623b      	str	r3, [r7, #32]
          break;
 800276e:	e013      	b.n	8002798 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002778:	2308      	movs	r3, #8
 800277a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	611a      	str	r2, [r3, #16]
          break;
 8002782:	e009      	b.n	8002798 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002784:	2308      	movs	r3, #8
 8002786:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	615a      	str	r2, [r3, #20]
          break;
 800278e:	e003      	b.n	8002798 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x130>
          break;
 8002796:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2bff      	cmp	r3, #255	; 0xff
 800279c:	d801      	bhi.n	80027a2 <HAL_GPIO_Init+0x13a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	e001      	b.n	80027a6 <HAL_GPIO_Init+0x13e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2bff      	cmp	r3, #255	; 0xff
 80027ac:	d802      	bhi.n	80027b4 <HAL_GPIO_Init+0x14c>
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	e002      	b.n	80027ba <HAL_GPIO_Init+0x152>
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	3b08      	subs	r3, #8
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	210f      	movs	r1, #15
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	6a39      	ldr	r1, [r7, #32]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	431a      	orrs	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80b1 	beq.w	800294a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027e8:	4b4d      	ldr	r3, [pc, #308]	; (8002920 <HAL_GPIO_Init+0x2b8>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a4c      	ldr	r2, [pc, #304]	; (8002920 <HAL_GPIO_Init+0x2b8>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_GPIO_Init+0x2b8>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002800:	4a48      	ldr	r2, [pc, #288]	; (8002924 <HAL_GPIO_Init+0x2bc>)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	220f      	movs	r2, #15
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a40      	ldr	r2, [pc, #256]	; (8002928 <HAL_GPIO_Init+0x2c0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d013      	beq.n	8002854 <HAL_GPIO_Init+0x1ec>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3f      	ldr	r2, [pc, #252]	; (800292c <HAL_GPIO_Init+0x2c4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00d      	beq.n	8002850 <HAL_GPIO_Init+0x1e8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3e      	ldr	r2, [pc, #248]	; (8002930 <HAL_GPIO_Init+0x2c8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x1e4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3d      	ldr	r2, [pc, #244]	; (8002934 <HAL_GPIO_Init+0x2cc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_GPIO_Init+0x1e0>
 8002844:	2303      	movs	r3, #3
 8002846:	e006      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 8002848:	2304      	movs	r3, #4
 800284a:	e004      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 800284c:	2302      	movs	r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_GPIO_Init+0x1ee>
 8002854:	2300      	movs	r3, #0
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	f002 0203 	and.w	r2, r2, #3
 800285c:	0092      	lsls	r2, r2, #2
 800285e:	4093      	lsls	r3, r2
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002866:	492f      	ldr	r1, [pc, #188]	; (8002924 <HAL_GPIO_Init+0x2bc>)
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	492c      	ldr	r1, [pc, #176]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	43db      	mvns	r3, r3
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 8002898:	4013      	ands	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028a8:	4b23      	ldr	r3, [pc, #140]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4922      	ldr	r1, [pc, #136]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	491e      	ldr	r1, [pc, #120]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4918      	ldr	r1, [pc, #96]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4914      	ldr	r1, [pc, #80]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d021      	beq.n	800293c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	490e      	ldr	r1, [pc, #56]	; (8002938 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e021      	b.n	800294a <HAL_GPIO_Init+0x2e2>
 8002906:	bf00      	nop
 8002908:	10320000 	.word	0x10320000
 800290c:	10310000 	.word	0x10310000
 8002910:	10220000 	.word	0x10220000
 8002914:	10210000 	.word	0x10210000
 8002918:	10120000 	.word	0x10120000
 800291c:	10110000 	.word	0x10110000
 8002920:	40021000 	.word	0x40021000
 8002924:	40010000 	.word	0x40010000
 8002928:	40010800 	.word	0x40010800
 800292c:	40010c00 	.word	0x40010c00
 8002930:	40011000 	.word	0x40011000
 8002934:	40011400 	.word	0x40011400
 8002938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_GPIO_Init+0x304>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	43db      	mvns	r3, r3
 8002944:	4909      	ldr	r1, [pc, #36]	; (800296c <HAL_GPIO_Init+0x304>)
 8002946:	4013      	ands	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	3301      	adds	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	f47f ae8e 	bne.w	800267c <HAL_GPIO_Init+0x14>
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	372c      	adds	r7, #44	; 0x2c
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40010400 	.word	0x40010400

08002970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e001      	b.n	8002992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	807b      	strh	r3, [r7, #2]
 80029aa:	4613      	mov	r3, r2
 80029ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ae:	787b      	ldrb	r3, [r7, #1]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ba:	e003      	b.n	80029c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	041a      	lsls	r2, r3, #16
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	611a      	str	r2, [r3, #16]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e12b      	b.n	8002c3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fc1e 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a34:	f000 fcda 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8002a38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a81      	ldr	r2, [pc, #516]	; (8002c44 <HAL_I2C_Init+0x274>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d807      	bhi.n	8002a54 <HAL_I2C_Init+0x84>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a80      	ldr	r2, [pc, #512]	; (8002c48 <HAL_I2C_Init+0x278>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	bf94      	ite	ls
 8002a4c:	2301      	movls	r3, #1
 8002a4e:	2300      	movhi	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e006      	b.n	8002a62 <HAL_I2C_Init+0x92>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a7d      	ldr	r2, [pc, #500]	; (8002c4c <HAL_I2C_Init+0x27c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf94      	ite	ls
 8002a5c:	2301      	movls	r3, #1
 8002a5e:	2300      	movhi	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0e7      	b.n	8002c3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a78      	ldr	r2, [pc, #480]	; (8002c50 <HAL_I2C_Init+0x280>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9b      	lsrs	r3, r3, #18
 8002a74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_I2C_Init+0x274>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d802      	bhi.n	8002aa4 <HAL_I2C_Init+0xd4>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	e009      	b.n	8002ab8 <HAL_I2C_Init+0xe8>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	4a69      	ldr	r2, [pc, #420]	; (8002c54 <HAL_I2C_Init+0x284>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	495c      	ldr	r1, [pc, #368]	; (8002c44 <HAL_I2C_Init+0x274>)
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	d819      	bhi.n	8002b0c <HAL_I2C_Init+0x13c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1e59      	subs	r1, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae6:	1c59      	adds	r1, r3, #1
 8002ae8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aec:	400b      	ands	r3, r1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_I2C_Init+0x138>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1e59      	subs	r1, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b06:	e051      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b08:	2304      	movs	r3, #4
 8002b0a:	e04f      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d111      	bne.n	8002b38 <HAL_I2C_Init+0x168>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	440b      	add	r3, r1
 8002b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e012      	b.n	8002b5e <HAL_I2C_Init+0x18e>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Init+0x196>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e022      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10e      	bne.n	8002b8c <HAL_I2C_Init+0x1bc>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e58      	subs	r0, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	440b      	add	r3, r1
 8002b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8a:	e00f      	b.n	8002bac <HAL_I2C_Init+0x1dc>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6809      	ldr	r1, [r1, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6911      	ldr	r1, [r2, #16]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	4311      	orrs	r1, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	000186a0 	.word	0x000186a0
 8002c48:	001e847f 	.word	0x001e847f
 8002c4c:	003d08ff 	.word	0x003d08ff
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e272      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8087 	beq.w	8002d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c78:	4b92      	ldr	r3, [pc, #584]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d00c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c84:	4b8f      	ldr	r3, [pc, #572]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d112      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x5e>
 8002c90:	4b8c      	ldr	r3, [pc, #560]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9e:	4b89      	ldr	r3, [pc, #548]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d06c      	beq.n	8002d84 <HAL_RCC_OscConfig+0x12c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d168      	bne.n	8002d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e24c      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x76>
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7f      	ldr	r2, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e02e      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x98>
 8002cd6:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7a      	ldr	r2, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e01d      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf8:	d10c      	bne.n	8002d14 <HAL_RCC_OscConfig+0xbc>
 8002cfa:	4b72      	ldr	r3, [pc, #456]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a71      	ldr	r2, [pc, #452]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e00b      	b.n	8002d2c <HAL_RCC_OscConfig+0xd4>
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a6a      	ldr	r2, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d013      	beq.n	8002d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fc4c 	bl	80015d0 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe fc48 	bl	80015d0 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e200      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b5d      	ldr	r3, [pc, #372]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe4>
 8002d5a:	e014      	b.n	8002d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fc38 	bl	80015d0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fc34 	bl	80015d0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1ec      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x10c>
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d063      	beq.n	8002e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d92:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d9e:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d11c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x18c>
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d116      	bne.n	8002de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_RCC_OscConfig+0x176>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e1c0      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4939      	ldr	r1, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	e03a      	b.n	8002e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d020      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fbed 	bl	80015d0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fbe9 	bl	80015d0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1a1      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4927      	ldr	r1, [pc, #156]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
 8002e2c:	e015      	b.n	8002e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_RCC_OscConfig+0x270>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fbcc 	bl	80015d0 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fbc8 	bl	80015d0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e180      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03a      	beq.n	8002edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d019      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_RCC_OscConfig+0x274>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e74:	f7fe fbac 	bl	80015d0 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fba8 	bl	80015d0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e160      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f000 fafe 	bl	800349c <RCC_Delay>
 8002ea0:	e01c      	b.n	8002edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_RCC_OscConfig+0x274>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fb92 	bl	80015d0 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eae:	e00f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fb8e 	bl	80015d0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d908      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e146      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	42420000 	.word	0x42420000
 8002ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b92      	ldr	r3, [pc, #584]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e9      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80a6 	beq.w	8003036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b8b      	ldr	r3, [pc, #556]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	4a87      	ldr	r2, [pc, #540]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	61d3      	str	r3, [r2, #28]
 8002f06:	4b85      	ldr	r3, [pc, #532]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCC_OscConfig+0x4c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x4c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7e      	ldr	r2, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x4c8>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fb4f 	bl	80015d0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe fb4b 	bl	80015d0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b64      	cmp	r3, #100	; 0x64
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e103      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b75      	ldr	r3, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x4c8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x312>
 8002f5c:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	e02d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x36e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x334>
 8002f72:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4a69      	ldr	r2, [pc, #420]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	6213      	str	r3, [r2, #32]
 8002f7e:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a66      	ldr	r2, [pc, #408]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	6213      	str	r3, [r2, #32]
 8002f8a:	e01c      	b.n	8002fc6 <HAL_RCC_OscConfig+0x36e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d10c      	bne.n	8002fae <HAL_RCC_OscConfig+0x356>
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a60      	ldr	r2, [pc, #384]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	4b5e      	ldr	r3, [pc, #376]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a5d      	ldr	r2, [pc, #372]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	e00b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x36e>
 8002fae:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a5a      	ldr	r2, [pc, #360]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6213      	str	r3, [r2, #32]
 8002fba:	4b58      	ldr	r3, [pc, #352]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a57      	ldr	r2, [pc, #348]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d015      	beq.n	8002ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7fe faff 	bl	80015d0 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe fafb 	bl	80015d0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0b1      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	4b4b      	ldr	r3, [pc, #300]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ee      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x37e>
 8002ff8:	e014      	b.n	8003024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fae9 	bl	80015d0 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fae5 	bl	80015d0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e09b      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ee      	bne.n	8003002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d105      	bne.n	8003036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b3c      	ldr	r3, [pc, #240]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8087 	beq.w	800314e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d061      	beq.n	8003110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d146      	bne.n	80030e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b33      	ldr	r3, [pc, #204]	; (8003124 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305a:	f7fe fab9 	bl	80015d0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7fe fab5 	bl	80015d0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e06d      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d108      	bne.n	800309c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4921      	ldr	r1, [pc, #132]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309c:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a19      	ldr	r1, [r3, #32]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	430b      	orrs	r3, r1
 80030ae:	491b      	ldr	r1, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x4cc>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe fa89 	bl	80015d0 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fa85 	bl	80015d0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e03d      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d4:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46a>
 80030e0:	e035      	b.n	800314e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fa72 	bl	80015d0 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fa6e 	bl	80015d0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e026      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x4c4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x498>
 800310e:	e01e      	b.n	800314e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e019      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
 800311c:	40021000 	.word	0x40021000
 8003120:	40007000 	.word	0x40007000
 8003124:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_OscConfig+0x500>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000

0800315c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0d0      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d910      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b67      	ldr	r3, [pc, #412]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 0207 	bic.w	r2, r3, #7
 8003186:	4965      	ldr	r1, [pc, #404]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b8      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d040      	beq.n	800327c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d115      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e07f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e073      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06b      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4936      	ldr	r1, [pc, #216]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fe f9c0 	bl	80015d0 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe f9bc 	bl	80015d0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e053      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d210      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	4922      	ldr	r1, [pc, #136]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e032      	b.n	8003312 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4916      	ldr	r1, [pc, #88]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490e      	ldr	r1, [pc, #56]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ea:	f000 f821 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490a      	ldr	r1, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1cc>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1d0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe f826 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40022000 	.word	0x40022000
 8003320:	40021000 	.word	0x40021000
 8003324:	08006734 	.word	0x08006734
 8003328:	2000001c 	.word	0x2000001c
 800332c:	20000020 	.word	0x20000020

08003330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800334a:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x30>
 800335a:	2b08      	cmp	r3, #8
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x36>
 800335e:	e027      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003362:	613b      	str	r3, [r7, #16]
      break;
 8003364:	e027      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003370:	5cd3      	ldrb	r3, [r2, r3]
 8003372:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0c5b      	lsrs	r3, r3, #17
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003392:	fb03 f202 	mul.w	r2, r3, r2
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	e004      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	613b      	str	r3, [r7, #16]
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033b2:	613b      	str	r3, [r7, #16]
      break;
 80033b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b6:	693b      	ldr	r3, [r7, #16]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	007a1200 	.word	0x007a1200
 80033cc:	0800674c 	.word	0x0800674c
 80033d0:	0800675c 	.word	0x0800675c
 80033d4:	003d0900 	.word	0x003d0900

080033d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	2000001c 	.word	0x2000001c

080033ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f0:	f7ff fff2 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	08006744 	.word	0x08006744

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003418:	f7ff ffde 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0adb      	lsrs	r3, r3, #11
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	08006744 	.word	0x08006744

0800343c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	220f      	movs	r2, #15
 800344a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0203 	and.w	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_GetClockConfig+0x5c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40021000 	.word	0x40021000
 8003498:	40022000 	.word	0x40022000

0800349c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <RCC_Delay+0x34>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <RCC_Delay+0x38>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0a5b      	lsrs	r3, r3, #9
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034b8:	bf00      	nop
  }
  while (Delay --);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e5a      	subs	r2, r3, #1
 80034be:	60fa      	str	r2, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f9      	bne.n	80034b8 <RCC_Delay+0x1c>
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	2000001c 	.word	0x2000001c
 80034d4:	10624dd3 	.word	0x10624dd3

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d07d      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f8:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	61d3      	str	r3, [r2, #28]
 8003510:	4b49      	ldr	r3, [pc, #292]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d118      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352c:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a42      	ldr	r2, [pc, #264]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003538:	f7fe f84a 	bl	80015d0 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	e008      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7fe f846 	bl	80015d0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e06d      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d027      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003586:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d014      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fe f815 	bl	80015d0 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe f811 	bl	80015d0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e036      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ee      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4917      	ldr	r1, [pc, #92]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	490b      	ldr	r1, [pc, #44]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4904      	ldr	r1, [pc, #16]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	42420440 	.word	0x42420440

08003644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e041      	b.n	80036da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f839 	bl	80036e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f000 f9b4 	bl	80039f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e03a      	b.n	8003782 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_TIM_Base_Start_IT+0x98>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x58>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003736:	d009      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x58>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_TIM_Base_Start_IT+0x9c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x58>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_TIM_Base_Start_IT+0xa0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	e007      	b.n	8003780 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800

08003798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0202 	mvn.w	r2, #2
 80037c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8ed 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8e0 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8ef 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0204 	mvn.w	r2, #4
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8c3 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8b6 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8c5 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b08      	cmp	r3, #8
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0208 	mvn.w	r2, #8
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f899 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f88c 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f89b 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0210 	mvn.w	r2, #16
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2208      	movs	r2, #8
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f86f 	bl	80039ba <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f862 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f871 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0201 	mvn.w	r2, #1
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fbce 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d10e      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d107      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8bf 	bl	8003ac6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f835 	bl	80039de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b20      	cmp	r3, #32
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b20      	cmp	r3, #32
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0220 	mvn.w	r2, #32
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f88a 	bl	8003ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <TIM_Base_SetConfig+0xb8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0x30>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0x30>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a26      	ldr	r2, [pc, #152]	; (8003aac <TIM_Base_SetConfig+0xbc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0x30>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <TIM_Base_SetConfig+0xc0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <TIM_Base_SetConfig+0xb8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_Base_SetConfig+0x62>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d007      	beq.n	8003a52 <TIM_Base_SetConfig+0x62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <TIM_Base_SetConfig+0xbc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_Base_SetConfig+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <TIM_Base_SetConfig+0xc0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a07      	ldr	r2, [pc, #28]	; (8003aa8 <TIM_Base_SetConfig+0xb8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d103      	bne.n	8003a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	615a      	str	r2, [r3, #20]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800

08003ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e042      	b.n	8003b70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fbd8 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fdc5 	bl	80046ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d16d      	bne.n	8003c74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_UART_Transmit+0x2c>
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e066      	b.n	8003c76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2221      	movs	r2, #33	; 0x21
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb6:	f7fd fd0b 	bl	80015d0 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd0:	d108      	bne.n	8003be4 <HAL_UART_Transmit+0x6c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	e003      	b.n	8003bec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bec:	e02a      	b.n	8003c44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fb14 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e036      	b.n	8003c76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3302      	adds	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	e007      	b.n	8003c36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1cf      	bne.n	8003bee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fae4 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d112      	bne.n	8003cbe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_UART_Receive_IT+0x26>
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e00b      	b.n	8003cc0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fb24 	bl	8004302 <UART_Start_Receive_IT>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	e000      	b.n	8003cc0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0ba      	sub	sp, #232	; 0xe8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_UART_IRQHandler+0x66>
 8003d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fc01 	bl	800452e <UART_Receive_IT>
      return;
 8003d2c:	e25b      	b.n	80041e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80de 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x22c>
 8003d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80d1 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_UART_IRQHandler+0xae>
 8003d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_UART_IRQHandler+0xd2>
 8003d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_UART_IRQHandler+0xf6>
 8003da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <HAL_UART_IRQHandler+0x126>
 8003dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 81f2 	beq.w	80041dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_UART_IRQHandler+0x14e>
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fb8c 	bl	800452e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_UART_IRQHandler+0x17a>
 8003e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d04f      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa96 	bl	8004374 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d041      	beq.n	8003eda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3314      	adds	r3, #20
 8003e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1d9      	bne.n	8003e56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d013      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	4a7e      	ldr	r2, [pc, #504]	; (80040a8 <HAL_UART_IRQHandler+0x3e0>)
 8003eb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fa2a 	bl	8002310 <HAL_DMA_Abort_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e00e      	b.n	8003ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f993 	bl	80041fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	e00a      	b.n	8003ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f98f 	bl	80041fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e006      	b.n	8003ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f98b 	bl	80041fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003eee:	e175      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	bf00      	nop
    return;
 8003ef2:	e173      	b.n	80041dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 814f 	bne.w	800419c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8148 	beq.w	800419c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8141 	beq.w	800419c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80b6 	beq.w	80040ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8145 	beq.w	80041e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	f080 813e 	bcs.w	80041e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	f000 8088 	beq.w	8004088 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fa4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1d9      	bne.n	8003f78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fe8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ff0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e1      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004024:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800402a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e3      	bne.n	8004000 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004058:	f023 0310 	bic.w	r3, r3, #16
 800405c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800406a:	65ba      	str	r2, [r7, #88]	; 0x58
 800406c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e3      	bne.n	8004046 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f908 	bl	8002298 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004096:	b29b      	uxth	r3, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	b29b      	uxth	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8b6 	bl	8004210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040a4:	e09c      	b.n	80041e0 <HAL_UART_IRQHandler+0x518>
 80040a6:	bf00      	nop
 80040a8:	08004439 	.word	0x08004439
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 808e 	beq.w	80041e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8089 	beq.w	80041e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040f6:	647a      	str	r2, [r7, #68]	; 0x44
 80040f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e3      	bne.n	80040d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	623b      	str	r3, [r7, #32]
   return(result);
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800412e:	633a      	str	r2, [r7, #48]	; 0x30
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e3      	bne.n	800410a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004174:	61fa      	str	r2, [r7, #28]
 8004176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	617b      	str	r3, [r7, #20]
   return(result);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e3      	bne.n	8004150 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800418e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f83b 	bl	8004210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800419a:	e023      	b.n	80041e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <HAL_UART_IRQHandler+0x4f4>
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f953 	bl	8004460 <UART_Transmit_IT>
    return;
 80041ba:	e014      	b.n	80041e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00e      	beq.n	80041e6 <HAL_UART_IRQHandler+0x51e>
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f992 	bl	80044fe <UART_EndTransmit_IT>
    return;
 80041da:	e004      	b.n	80041e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80041dc:	bf00      	nop
 80041de:	e002      	b.n	80041e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80041e0:	bf00      	nop
 80041e2:	e000      	b.n	80041e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80041e4:	bf00      	nop
  }
}
 80041e6:	37e8      	adds	r7, #232	; 0xe8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b090      	sub	sp, #64	; 0x40
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	e050      	b.n	80042da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d04c      	beq.n	80042da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <UART_WaitOnFlagUntilTimeout+0x30>
 8004246:	f7fd f9c3 	bl	80015d0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004252:	429a      	cmp	r2, r3
 8004254:	d241      	bcs.n	80042da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800426c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004276:	637a      	str	r2, [r7, #52]	; 0x34
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800427c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e5      	bne.n	8004256 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	613b      	str	r3, [r7, #16]
   return(result);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042aa:	623a      	str	r2, [r7, #32]
 80042ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	69f9      	ldr	r1, [r7, #28]
 80042b0:	6a3a      	ldr	r2, [r7, #32]
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e00f      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d09f      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3740      	adds	r7, #64	; 0x40
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	4613      	mov	r3, r2
 800430e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	88fa      	ldrh	r2, [r7, #6]
 800431a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2222      	movs	r2, #34	; 0x22
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004346:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0220 	orr.w	r2, r2, #32
 8004366:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b095      	sub	sp, #84	; 0x54
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439c:	643a      	str	r2, [r7, #64]	; 0x40
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	61fb      	str	r3, [r7, #28]
   return(result);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e5      	bne.n	80043b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d119      	bne.n	8004420 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 0310 	bic.w	r3, r3, #16
 8004402:	647b      	str	r3, [r7, #68]	; 0x44
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440c:	61ba      	str	r2, [r7, #24]
 800440e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800442e:	bf00      	nop
 8004430:	3754      	adds	r7, #84	; 0x54
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff fed3 	bl	80041fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b21      	cmp	r3, #33	; 0x21
 8004472:	d13e      	bne.n	80044f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d114      	bne.n	80044a8 <UART_Transmit_IT+0x48>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d110      	bne.n	80044a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]
 80044a6:	e008      	b.n	80044ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	1c59      	adds	r1, r3, #1
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6211      	str	r1, [r2, #32]
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4619      	mov	r1, r3
 80044c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fe64 	bl	80041ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08c      	sub	sp, #48	; 0x30
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b22      	cmp	r3, #34	; 0x22
 8004540:	f040 80ae 	bne.w	80046a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d117      	bne.n	800457e <UART_Receive_IT+0x50>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d113      	bne.n	800457e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456c:	b29a      	uxth	r2, r3
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
 800457c:	e026      	b.n	80045cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d007      	beq.n	80045a2 <UART_Receive_IT+0x74>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <UART_Receive_IT+0x82>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e008      	b.n	80045c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4619      	mov	r1, r3
 80045da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d15d      	bne.n	800469c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0220 	bic.w	r2, r2, #32
 80045ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2b01      	cmp	r3, #1
 8004624:	d135      	bne.n	8004692 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	613b      	str	r3, [r7, #16]
   return(result);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 0310 	bic.w	r3, r3, #16
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	623a      	str	r2, [r7, #32]
 800464e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	69f9      	ldr	r1, [r7, #28]
 8004652:	6a3a      	ldr	r2, [r7, #32]
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	61bb      	str	r3, [r7, #24]
   return(result);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d10a      	bne.n	8004684 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fdc0 	bl	8004210 <HAL_UARTEx_RxEventCallback>
 8004690:	e002      	b.n	8004698 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc f9c8 	bl	8000a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e002      	b.n	80046a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3730      	adds	r7, #48	; 0x30
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046e6:	f023 030c 	bic.w	r3, r3, #12
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <UART_SetConfig+0x114>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d103      	bne.n	800471c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fe fe7e 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	e002      	b.n	8004722 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7fe fe66 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8004720:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009a      	lsls	r2, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <UART_SetConfig+0x118>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	0119      	lsls	r1, r3, #4
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fbb2 f2f3 	udiv	r2, r2, r3
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <UART_SetConfig+0x118>)
 800475a:	fba3 0302 	umull	r0, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2064      	movs	r0, #100	; 0x64
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <UART_SetConfig+0x118>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004778:	4419      	add	r1, r3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009a      	lsls	r2, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <UART_SetConfig+0x118>)
 8004792:	fba3 0302 	umull	r0, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2064      	movs	r0, #100	; 0x64
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <UART_SetConfig+0x118>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	440a      	add	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40013800 	.word	0x40013800
 80047c4:	51eb851f 	.word	0x51eb851f

080047c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047da:	2b84      	cmp	r3, #132	; 0x84
 80047dc:	d005      	beq.n	80047ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	3303      	adds	r3, #3
 80047e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80047fa:	f000 fae7 	bl	8004dcc <vTaskStartScheduler>
  
  return osOK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}

08004804 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af04      	add	r7, sp, #16
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <osThreadCreate+0x54>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01c      	beq.n	8004858 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685c      	ldr	r4, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691e      	ldr	r6, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ffc9 	bl	80047c8 <makeFreeRtosPriority>
 8004836:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004840:	9202      	str	r2, [sp, #8]
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	9100      	str	r1, [sp, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	4632      	mov	r2, r6
 800484a:	4629      	mov	r1, r5
 800484c:	4620      	mov	r0, r4
 800484e:	f000 f8e8 	bl	8004a22 <xTaskCreateStatic>
 8004852:	4603      	mov	r3, r0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e01c      	b.n	8004892 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685c      	ldr	r4, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004864:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ffab 	bl	80047c8 <makeFreeRtosPriority>
 8004872:	4602      	mov	r2, r0
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	9200      	str	r2, [sp, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4632      	mov	r2, r6
 8004880:	4629      	mov	r1, r5
 8004882:	4620      	mov	r0, r4
 8004884:	f000 f929 	bl	8004ada <xTaskCreate>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004892:	68fb      	ldr	r3, [r7, #12]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800489c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <osDelay+0x16>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	e000      	b.n	80048b4 <osDelay+0x18>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fa55 	bl	8004d64 <vTaskDelay>
  
  return osOK;
 80048ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f103 0208 	add.w	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0208 	add.w	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0208 	add.w	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d103      	bne.n	8004980 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e00c      	b.n	800499a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3308      	adds	r3, #8
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e002      	b.n	800498e <vListInsert+0x2e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d2f6      	bcs.n	8004988 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6892      	ldr	r2, [r2, #8]
 80049e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6852      	ldr	r2, [r2, #4]
 80049f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d103      	bne.n	8004a04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b08e      	sub	sp, #56	; 0x38
 8004a26:	af04      	add	r7, sp, #16
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	61fb      	str	r3, [r7, #28]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a68:	23a0      	movs	r3, #160	; 0xa0
 8004a6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004a70:	d00a      	beq.n	8004a88 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	61bb      	str	r3, [r7, #24]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01e      	beq.n	8004acc <xTaskCreateStatic+0xaa>
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9303      	str	r3, [sp, #12]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	9302      	str	r3, [sp, #8]
 8004aae:	f107 0314 	add.w	r3, r7, #20
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f850 	bl	8004b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ac6:	f000 f8e3 	bl	8004c90 <prvAddNewTaskToReadyList>
 8004aca:	e001      	b.n	8004ad0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ad0:	697b      	ldr	r3, [r7, #20]
	}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3728      	adds	r7, #40	; 0x28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b08c      	sub	sp, #48	; 0x30
 8004ade:	af04      	add	r7, sp, #16
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fe96 	bl	8005820 <pvPortMalloc>
 8004af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004afc:	20a0      	movs	r0, #160	; 0xa0
 8004afe:	f000 fe8f 	bl	8005820 <pvPortMalloc>
 8004b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b10:	e005      	b.n	8004b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 ff48 	bl	80059a8 <vPortFree>
 8004b18:	e001      	b.n	8004b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d017      	beq.n	8004b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b2c:	88fa      	ldrh	r2, [r7, #6]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9303      	str	r3, [sp, #12]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	9302      	str	r3, [sp, #8]
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f80e 	bl	8004b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b48:	69f8      	ldr	r0, [r7, #28]
 8004b4a:	f000 f8a1 	bl	8004c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e002      	b.n	8004b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	617b      	str	r3, [r7, #20]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e012      	b.n	8004bd8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	7819      	ldrb	r1, [r3, #0]
 8004bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3334      	adds	r3, #52	; 0x34
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	d9e9      	bls.n	8004bb2 <prvInitialiseNewTask+0x4e>
 8004bde:	e000      	b.n	8004be2 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004be0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d901      	bls.n	8004bf4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bf0:	2306      	movs	r3, #6
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fe79 	bl	8004902 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3318      	adds	r3, #24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fe74 	bl	8004902 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	f1c3 0207 	rsb	r2, r3, #7
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	334c      	adds	r3, #76	; 0x4c
 8004c44:	224c      	movs	r2, #76	; 0x4c
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 ffe1 	bl	8005c10 <memset>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <prvInitialiseNewTask+0x120>)
 8004c52:	651a      	str	r2, [r3, #80]	; 0x50
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <prvInitialiseNewTask+0x124>)
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	4a0b      	ldr	r2, [pc, #44]	; (8004c8c <prvInitialiseNewTask+0x128>)
 8004c5e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	69b8      	ldr	r0, [r7, #24]
 8004c66:	f000 fc29 	bl	80054bc <pxPortInitialiseStack>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20001224 	.word	0x20001224
 8004c88:	2000128c 	.word	0x2000128c
 8004c8c:	200012f4 	.word	0x200012f4

08004c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c98:	f000 fd00 	bl	800569c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c9c:	4b2a      	ldr	r3, [pc, #168]	; (8004d48 <prvAddNewTaskToReadyList+0xb8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	4a29      	ldr	r2, [pc, #164]	; (8004d48 <prvAddNewTaskToReadyList+0xb8>)
 8004ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cae:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <prvAddNewTaskToReadyList+0xb8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d110      	bne.n	8004cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cbc:	f000 fad2 	bl	8005264 <prvInitialiseTaskLists>
 8004cc0:	e00d      	b.n	8004cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <prvAddNewTaskToReadyList+0xc0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d802      	bhi.n	8004cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <prvAddNewTaskToReadyList+0xc4>)
 8004ce6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <prvAddNewTaskToReadyList+0xc8>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <prvAddNewTaskToReadyList+0xcc>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7ff fe02 	bl	800491a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d16:	f000 fcf1 	bl	80056fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <prvAddNewTaskToReadyList+0xc0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <prvAddNewTaskToReadyList+0xbc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d207      	bcs.n	8004d40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvAddNewTaskToReadyList+0xd0>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200005d8 	.word	0x200005d8
 8004d4c:	200004d8 	.word	0x200004d8
 8004d50:	200005e4 	.word	0x200005e4
 8004d54:	200005f4 	.word	0x200005f4
 8004d58:	200005e0 	.word	0x200005e0
 8004d5c:	200004dc 	.word	0x200004dc
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <vTaskDelay+0x60>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <vTaskDelay+0x30>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d94:	f000 f884 	bl	8004ea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d98:	2100      	movs	r1, #0
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fb28 	bl	80053f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004da0:	f000 f88c 	bl	8004ebc <xTaskResumeAll>
 8004da4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <vTaskDelay+0x64>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	20000600 	.word	0x20000600
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dda:	463a      	mov	r2, r7
 8004ddc:	1d39      	adds	r1, r7, #4
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb f9bc 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	9202      	str	r2, [sp, #8]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	460a      	mov	r2, r1
 8004dfa:	4921      	ldr	r1, [pc, #132]	; (8004e80 <vTaskStartScheduler+0xb4>)
 8004dfc:	4821      	ldr	r0, [pc, #132]	; (8004e84 <vTaskStartScheduler+0xb8>)
 8004dfe:	f7ff fe10 	bl	8004a22 <xTaskCreateStatic>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <vTaskStartScheduler+0xbc>)
 8004e06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e08:	4b1f      	ldr	r3, [pc, #124]	; (8004e88 <vTaskStartScheduler+0xbc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e001      	b.n	8004e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d11b      	bne.n	8004e58 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
}
 8004e32:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <vTaskStartScheduler+0xc0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	334c      	adds	r3, #76	; 0x4c
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <vTaskStartScheduler+0xc4>)
 8004e3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <vTaskStartScheduler+0xc8>)
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e46:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <vTaskStartScheduler+0xcc>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <vTaskStartScheduler+0xd0>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e52:	f000 fbb1 	bl	80055b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e56:	e00e      	b.n	8004e76 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d10a      	bne.n	8004e76 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <vTaskStartScheduler+0xa8>
}
 8004e76:	bf00      	nop
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	0800672c 	.word	0x0800672c
 8004e84:	08005235 	.word	0x08005235
 8004e88:	200005fc 	.word	0x200005fc
 8004e8c:	200004d8 	.word	0x200004d8
 8004e90:	20000078 	.word	0x20000078
 8004e94:	200005f8 	.word	0x200005f8
 8004e98:	200005e4 	.word	0x200005e4
 8004e9c:	200005dc 	.word	0x200005dc

08004ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <vTaskSuspendAll+0x18>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	4a03      	ldr	r2, [pc, #12]	; (8004eb8 <vTaskSuspendAll+0x18>)
 8004eac:	6013      	str	r3, [r2, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000600 	.word	0x20000600

08004ebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <xTaskResumeAll+0x114>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	603b      	str	r3, [r7, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ee8:	f000 fbd8 	bl	800569c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eec:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <xTaskResumeAll+0x114>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	4a37      	ldr	r2, [pc, #220]	; (8004fd0 <xTaskResumeAll+0x114>)
 8004ef4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef6:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <xTaskResumeAll+0x114>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d161      	bne.n	8004fc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004efe:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <xTaskResumeAll+0x118>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d05d      	beq.n	8004fc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f06:	e02e      	b.n	8004f66 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f08:	4b33      	ldr	r3, [pc, #204]	; (8004fd8 <xTaskResumeAll+0x11c>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3318      	adds	r3, #24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff fd5b 	bl	80049d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fd56 	bl	80049d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	2201      	movs	r2, #1
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <xTaskResumeAll+0x120>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <xTaskResumeAll+0x120>)
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4a27      	ldr	r2, [pc, #156]	; (8004fe0 <xTaskResumeAll+0x124>)
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7ff fce4 	bl	800491a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <xTaskResumeAll+0x128>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <xTaskResumeAll+0x12c>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f66:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <xTaskResumeAll+0x11c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1cc      	bne.n	8004f08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f74:	f000 fa18 	bl	80053a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f78:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <xTaskResumeAll+0x130>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d010      	beq.n	8004fa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f84:	f000 f836 	bl	8004ff4 <xTaskIncrementTick>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <xTaskResumeAll+0x12c>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f1      	bne.n	8004f84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <xTaskResumeAll+0x130>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <xTaskResumeAll+0x12c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d009      	beq.n	8004fc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <xTaskResumeAll+0x134>)
 8004fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fc2:	f000 fb9b 	bl	80056fc <vPortExitCritical>

	return xAlreadyYielded;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000600 	.word	0x20000600
 8004fd4:	200005d8 	.word	0x200005d8
 8004fd8:	20000598 	.word	0x20000598
 8004fdc:	200005e0 	.word	0x200005e0
 8004fe0:	200004dc 	.word	0x200004dc
 8004fe4:	200004d8 	.word	0x200004d8
 8004fe8:	200005ec 	.word	0x200005ec
 8004fec:	200005e8 	.word	0x200005e8
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffe:	4b51      	ldr	r3, [pc, #324]	; (8005144 <xTaskIncrementTick+0x150>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f040 808d 	bne.w	8005122 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <xTaskIncrementTick+0x154>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005010:	4a4d      	ldr	r2, [pc, #308]	; (8005148 <xTaskIncrementTick+0x154>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d120      	bne.n	800505e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <xTaskIncrementTick+0x158>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <xTaskIncrementTick+0x48>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
}
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <xTaskIncrementTick+0x46>
 800503c:	4b43      	ldr	r3, [pc, #268]	; (800514c <xTaskIncrementTick+0x158>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <xTaskIncrementTick+0x15c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a41      	ldr	r2, [pc, #260]	; (800514c <xTaskIncrementTick+0x158>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4a41      	ldr	r2, [pc, #260]	; (8005150 <xTaskIncrementTick+0x15c>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b40      	ldr	r3, [pc, #256]	; (8005154 <xTaskIncrementTick+0x160>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a3f      	ldr	r2, [pc, #252]	; (8005154 <xTaskIncrementTick+0x160>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	f000 f9a5 	bl	80053a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800505e:	4b3e      	ldr	r3, [pc, #248]	; (8005158 <xTaskIncrementTick+0x164>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d34d      	bcc.n	8005104 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005068:	4b38      	ldr	r3, [pc, #224]	; (800514c <xTaskIncrementTick+0x158>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <xTaskIncrementTick+0x82>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <xTaskIncrementTick+0x84>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d004      	beq.n	8005086 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507c:	4b36      	ldr	r3, [pc, #216]	; (8005158 <xTaskIncrementTick+0x164>)
 800507e:	f04f 32ff 	mov.w	r2, #4294967295
 8005082:	601a      	str	r2, [r3, #0]
					break;
 8005084:	e03e      	b.n	8005104 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <xTaskIncrementTick+0x158>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	429a      	cmp	r2, r3
 800509c:	d203      	bcs.n	80050a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800509e:	4a2e      	ldr	r2, [pc, #184]	; (8005158 <xTaskIncrementTick+0x164>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6013      	str	r3, [r2, #0]
						break;
 80050a4:	e02e      	b.n	8005104 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fc90 	bl	80049d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	3318      	adds	r3, #24
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fc87 	bl	80049d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	2201      	movs	r2, #1
 80050c8:	409a      	lsls	r2, r3
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <xTaskIncrementTick+0x168>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <xTaskIncrementTick+0x168>)
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <xTaskIncrementTick+0x16c>)
 80050e2:	441a      	add	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7ff fc15 	bl	800491a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <xTaskIncrementTick+0x170>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3b4      	bcc.n	8005068 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050fe:	2301      	movs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005102:	e7b1      	b.n	8005068 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005104:	4b17      	ldr	r3, [pc, #92]	; (8005164 <xTaskIncrementTick+0x170>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4915      	ldr	r1, [pc, #84]	; (8005160 <xTaskIncrementTick+0x16c>)
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d907      	bls.n	800512c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800511c:	2301      	movs	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e004      	b.n	800512c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <xTaskIncrementTick+0x174>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <xTaskIncrementTick+0x174>)
 800512a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <xTaskIncrementTick+0x178>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005138:	697b      	ldr	r3, [r7, #20]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000600 	.word	0x20000600
 8005148:	200005dc 	.word	0x200005dc
 800514c:	20000590 	.word	0x20000590
 8005150:	20000594 	.word	0x20000594
 8005154:	200005f0 	.word	0x200005f0
 8005158:	200005f8 	.word	0x200005f8
 800515c:	200005e0 	.word	0x200005e0
 8005160:	200004dc 	.word	0x200004dc
 8005164:	200004d8 	.word	0x200004d8
 8005168:	200005e8 	.word	0x200005e8
 800516c:	200005ec 	.word	0x200005ec

08005170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005176:	4b29      	ldr	r3, [pc, #164]	; (800521c <vTaskSwitchContext+0xac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800517e:	4b28      	ldr	r3, [pc, #160]	; (8005220 <vTaskSwitchContext+0xb0>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005184:	e044      	b.n	8005210 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <vTaskSwitchContext+0xb0>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800518c:	4b25      	ldr	r3, [pc, #148]	; (8005224 <vTaskSwitchContext+0xb4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	fab3 f383 	clz	r3, r3
 8005198:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800519a:	7afb      	ldrb	r3, [r7, #11]
 800519c:	f1c3 031f 	rsb	r3, r3, #31
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	4921      	ldr	r1, [pc, #132]	; (8005228 <vTaskSwitchContext+0xb8>)
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	607b      	str	r3, [r7, #4]
}
 80051c8:	bf00      	nop
 80051ca:	e7fe      	b.n	80051ca <vTaskSwitchContext+0x5a>
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4a14      	ldr	r2, [pc, #80]	; (8005228 <vTaskSwitchContext+0xb8>)
 80051d8:	4413      	add	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	3308      	adds	r3, #8
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d104      	bne.n	80051fc <vTaskSwitchContext+0x8c>
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <vTaskSwitchContext+0xbc>)
 8005204:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <vTaskSwitchContext+0xbc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	334c      	adds	r3, #76	; 0x4c
 800520c:	4a08      	ldr	r2, [pc, #32]	; (8005230 <vTaskSwitchContext+0xc0>)
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	bf00      	nop
 8005212:	371c      	adds	r7, #28
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000600 	.word	0x20000600
 8005220:	200005ec 	.word	0x200005ec
 8005224:	200005e0 	.word	0x200005e0
 8005228:	200004dc 	.word	0x200004dc
 800522c:	200004d8 	.word	0x200004d8
 8005230:	20000078 	.word	0x20000078

08005234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800523c:	f000 f852 	bl	80052e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <prvIdleTask+0x28>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d9f9      	bls.n	800523c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <prvIdleTask+0x2c>)
 800524a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005258:	e7f0      	b.n	800523c <prvIdleTask+0x8>
 800525a:	bf00      	nop
 800525c:	200004dc 	.word	0x200004dc
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800526a:	2300      	movs	r3, #0
 800526c:	607b      	str	r3, [r7, #4]
 800526e:	e00c      	b.n	800528a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4a12      	ldr	r2, [pc, #72]	; (80052c4 <prvInitialiseTaskLists+0x60>)
 800527c:	4413      	add	r3, r2
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fb20 	bl	80048c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3301      	adds	r3, #1
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b06      	cmp	r3, #6
 800528e:	d9ef      	bls.n	8005270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005290:	480d      	ldr	r0, [pc, #52]	; (80052c8 <prvInitialiseTaskLists+0x64>)
 8005292:	f7ff fb17 	bl	80048c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <prvInitialiseTaskLists+0x68>)
 8005298:	f7ff fb14 	bl	80048c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800529c:	480c      	ldr	r0, [pc, #48]	; (80052d0 <prvInitialiseTaskLists+0x6c>)
 800529e:	f7ff fb11 	bl	80048c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052a2:	480c      	ldr	r0, [pc, #48]	; (80052d4 <prvInitialiseTaskLists+0x70>)
 80052a4:	f7ff fb0e 	bl	80048c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052a8:	480b      	ldr	r0, [pc, #44]	; (80052d8 <prvInitialiseTaskLists+0x74>)
 80052aa:	f7ff fb0b 	bl	80048c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <prvInitialiseTaskLists+0x78>)
 80052b0:	4a05      	ldr	r2, [pc, #20]	; (80052c8 <prvInitialiseTaskLists+0x64>)
 80052b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <prvInitialiseTaskLists+0x7c>)
 80052b6:	4a05      	ldr	r2, [pc, #20]	; (80052cc <prvInitialiseTaskLists+0x68>)
 80052b8:	601a      	str	r2, [r3, #0]
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200004dc 	.word	0x200004dc
 80052c8:	20000568 	.word	0x20000568
 80052cc:	2000057c 	.word	0x2000057c
 80052d0:	20000598 	.word	0x20000598
 80052d4:	200005ac 	.word	0x200005ac
 80052d8:	200005c4 	.word	0x200005c4
 80052dc:	20000590 	.word	0x20000590
 80052e0:	20000594 	.word	0x20000594

080052e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ea:	e019      	b.n	8005320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052ec:	f000 f9d6 	bl	800569c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80052f0:	4b10      	ldr	r3, [pc, #64]	; (8005334 <prvCheckTasksWaitingTermination+0x50>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fb67 	bl	80049d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <prvCheckTasksWaitingTermination+0x54>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3b01      	subs	r3, #1
 8005308:	4a0b      	ldr	r2, [pc, #44]	; (8005338 <prvCheckTasksWaitingTermination+0x54>)
 800530a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800530c:	4b0b      	ldr	r3, [pc, #44]	; (800533c <prvCheckTasksWaitingTermination+0x58>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3b01      	subs	r3, #1
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <prvCheckTasksWaitingTermination+0x58>)
 8005314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005316:	f000 f9f1 	bl	80056fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f810 	bl	8005340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <prvCheckTasksWaitingTermination+0x58>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e1      	bne.n	80052ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	200005ac 	.word	0x200005ac
 8005338:	200005d8 	.word	0x200005d8
 800533c:	200005c0 	.word	0x200005c0

08005340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	334c      	adds	r3, #76	; 0x4c
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fc67 	bl	8005c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005358:	2b00      	cmp	r3, #0
 800535a:	d108      	bne.n	800536e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fb21 	bl	80059a8 <vPortFree>
				vPortFree( pxTCB );
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb1e 	bl	80059a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800536c:	e018      	b.n	80053a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005374:	2b01      	cmp	r3, #1
 8005376:	d103      	bne.n	8005380 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb15 	bl	80059a8 <vPortFree>
	}
 800537e:	e00f      	b.n	80053a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005386:	2b02      	cmp	r3, #2
 8005388:	d00a      	beq.n	80053a0 <prvDeleteTCB+0x60>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60fb      	str	r3, [r7, #12]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <prvDeleteTCB+0x5e>
	}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ae:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <prvResetNextTaskUnblockTime+0x40>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <prvResetNextTaskUnblockTime+0x14>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <prvResetNextTaskUnblockTime+0x16>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <prvResetNextTaskUnblockTime+0x44>)
 80053c4:	f04f 32ff 	mov.w	r2, #4294967295
 80053c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053ca:	e008      	b.n	80053de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <prvResetNextTaskUnblockTime+0x40>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4a04      	ldr	r2, [pc, #16]	; (80053ec <prvResetNextTaskUnblockTime+0x44>)
 80053dc:	6013      	str	r3, [r2, #0]
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	20000590 	.word	0x20000590
 80053ec:	200005f8 	.word	0x200005f8

080053f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053fa:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005400:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3304      	adds	r3, #4
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fae2 	bl	80049d0 <uxListRemove>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005412:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	2201      	movs	r2, #1
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43da      	mvns	r2, r3
 8005420:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4013      	ands	r3, r2
 8005426:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005428:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d10a      	bne.n	8005448 <prvAddCurrentTaskToDelayedList+0x58>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3304      	adds	r3, #4
 800543e:	4619      	mov	r1, r3
 8005440:	481a      	ldr	r0, [pc, #104]	; (80054ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8005442:	f7ff fa6a 	bl	800491a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005446:	e026      	b.n	8005496 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	429a      	cmp	r2, r3
 800545e:	d209      	bcs.n	8005474 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7ff fa77 	bl	8004960 <vListInsert>
}
 8005472:	e010      	b.n	8005496 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7ff fa6d 	bl	8004960 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	d202      	bcs.n	8005496 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005490:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6013      	str	r3, [r2, #0]
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	200005dc 	.word	0x200005dc
 80054a4:	200004d8 	.word	0x200004d8
 80054a8:	200005e0 	.word	0x200005e0
 80054ac:	200005c4 	.word	0x200005c4
 80054b0:	20000594 	.word	0x20000594
 80054b4:	20000590 	.word	0x20000590
 80054b8:	200005f8 	.word	0x200005f8

080054bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3b04      	subs	r3, #4
 80054cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b04      	subs	r3, #4
 80054da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3b04      	subs	r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054ec:	4a08      	ldr	r2, [pc, #32]	; (8005510 <pxPortInitialiseStack+0x54>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3b14      	subs	r3, #20
 80054f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3b20      	subs	r3, #32
 8005502:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	08005515 	.word	0x08005515

08005514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800551a:	2300      	movs	r3, #0
 800551c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <prvTaskExitError+0x54>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d00a      	beq.n	800553e <prvTaskExitError+0x2a>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	60fb      	str	r3, [r7, #12]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <prvTaskExitError+0x28>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60bb      	str	r3, [r7, #8]
}
 8005550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005552:	bf00      	nop
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0fc      	beq.n	8005554 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000028 	.word	0x20000028
 800556c:	00000000 	.word	0x00000000

08005570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <pxCurrentTCBConst2>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800557a:	f380 8809 	msr	PSP, r0
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	f04e 0e0d 	orr.w	lr, lr, #13
 800558e:	4770      	bx	lr

08005590 <pxCurrentTCBConst2>:
 8005590:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop

08005598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005598:	4806      	ldr	r0, [pc, #24]	; (80055b4 <prvPortStartFirstTask+0x1c>)
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	6800      	ldr	r0, [r0, #0]
 800559e:	f380 8808 	msr	MSP, r0
 80055a2:	b662      	cpsie	i
 80055a4:	b661      	cpsie	f
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	df00      	svc	0
 80055b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055b2:	bf00      	nop
 80055b4:	e000ed08 	.word	0xe000ed08

080055b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055be:	4b32      	ldr	r3, [pc, #200]	; (8005688 <xPortStartScheduler+0xd0>)
 80055c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4b2a      	ldr	r3, [pc, #168]	; (800568c <xPortStartScheduler+0xd4>)
 80055e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055e6:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <xPortStartScheduler+0xd8>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ec:	e009      	b.n	8005602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80055ee:	4b28      	ldr	r3, [pc, #160]	; (8005690 <xPortStartScheduler+0xd8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <xPortStartScheduler+0xd8>)
 80055f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d0ef      	beq.n	80055ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <xPortStartScheduler+0xd8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1c3 0307 	rsb	r3, r3, #7
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00a      	beq.n	8005630 <xPortStartScheduler+0x78>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	60bb      	str	r3, [r7, #8]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005630:	4b17      	ldr	r3, [pc, #92]	; (8005690 <xPortStartScheduler+0xd8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <xPortStartScheduler+0xd8>)
 8005638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <xPortStartScheduler+0xd8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005642:	4a13      	ldr	r2, [pc, #76]	; (8005690 <xPortStartScheduler+0xd8>)
 8005644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <xPortStartScheduler+0xdc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <xPortStartScheduler+0xdc>)
 8005654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800565a:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <xPortStartScheduler+0xdc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a0d      	ldr	r2, [pc, #52]	; (8005694 <xPortStartScheduler+0xdc>)
 8005660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005666:	f000 f8b9 	bl	80057dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <xPortStartScheduler+0xe0>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005670:	f7ff ff92 	bl	8005598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005674:	f7ff fd7c 	bl	8005170 <vTaskSwitchContext>
	prvTaskExitError();
 8005678:	f7ff ff4c 	bl	8005514 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	e000e400 	.word	0xe000e400
 800568c:	20000604 	.word	0x20000604
 8005690:	20000608 	.word	0x20000608
 8005694:	e000ed20 	.word	0xe000ed20
 8005698:	20000028 	.word	0x20000028

0800569c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	607b      	str	r3, [r7, #4]
}
 80056b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056b6:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <vPortEnterCritical+0x58>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3301      	adds	r3, #1
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <vPortEnterCritical+0x58>)
 80056be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <vPortEnterCritical+0x58>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10f      	bne.n	80056e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <vPortEnterCritical+0x5c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	603b      	str	r3, [r7, #0]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <vPortEnterCritical+0x4a>
	}
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000028 	.word	0x20000028
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <vPortExitCritical+0x4c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <vPortExitCritical+0x24>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	607b      	str	r3, [r7, #4]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <vPortExitCritical+0x4c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3b01      	subs	r3, #1
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <vPortExitCritical+0x4c>)
 8005728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <vPortExitCritical+0x4c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <vPortExitCritical+0x42>
 8005732:	2300      	movs	r3, #0
 8005734:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800573c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	20000028 	.word	0x20000028
 800574c:	00000000 	.word	0x00000000

08005750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005750:	f3ef 8009 	mrs	r0, PSP
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <pxCurrentTCBConst>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005760:	6010      	str	r0, [r2, #0]
 8005762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800576a:	f380 8811 	msr	BASEPRI, r0
 800576e:	f7ff fcff 	bl	8005170 <vTaskSwitchContext>
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	6808      	ldr	r0, [r1, #0]
 8005782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005786:	f380 8809 	msr	PSP, r0
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	4770      	bx	lr

08005790 <pxCurrentTCBConst>:
 8005790:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	607b      	str	r3, [r7, #4]
}
 80057b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057b2:	f7ff fc1f 	bl	8004ff4 <xTaskIncrementTick>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <SysTick_Handler+0x40>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f383 8811 	msr	BASEPRI, r3
}
 80057ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <vPortSetupTimerInterrupt+0x30>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <vPortSetupTimerInterrupt+0x34>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <vPortSetupTimerInterrupt+0x38>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <vPortSetupTimerInterrupt+0x3c>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <vPortSetupTimerInterrupt+0x40>)
 80057fa:	3b01      	subs	r3, #1
 80057fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <vPortSetupTimerInterrupt+0x30>)
 8005800:	2207      	movs	r2, #7
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr
 800580c:	e000e010 	.word	0xe000e010
 8005810:	e000e018 	.word	0xe000e018
 8005814:	2000001c 	.word	0x2000001c
 8005818:	10624dd3 	.word	0x10624dd3
 800581c:	e000e014 	.word	0xe000e014

08005820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	; 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800582c:	f7ff fb38 	bl	8004ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005830:	4b58      	ldr	r3, [pc, #352]	; (8005994 <pvPortMalloc+0x174>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005838:	f000 f910 	bl	8005a5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800583c:	4b56      	ldr	r3, [pc, #344]	; (8005998 <pvPortMalloc+0x178>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	f040 808e 	bne.w	8005966 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01d      	beq.n	800588c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005850:	2208      	movs	r2, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	2b00      	cmp	r3, #0
 8005860:	d014      	beq.n	800588c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	3308      	adds	r3, #8
 800586a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <pvPortMalloc+0x6c>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	617b      	str	r3, [r7, #20]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d069      	beq.n	8005966 <pvPortMalloc+0x146>
 8005892:	4b42      	ldr	r3, [pc, #264]	; (800599c <pvPortMalloc+0x17c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d864      	bhi.n	8005966 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800589c:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <pvPortMalloc+0x180>)
 800589e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <pvPortMalloc+0x180>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a6:	e004      	b.n	80058b2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d903      	bls.n	80058c4 <pvPortMalloc+0xa4>
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f1      	bne.n	80058a8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058c4:	4b33      	ldr	r3, [pc, #204]	; (8005994 <pvPortMalloc+0x174>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d04b      	beq.n	8005966 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2208      	movs	r2, #8
 80058d4:	4413      	add	r3, r2
 80058d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	2308      	movs	r3, #8
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d91f      	bls.n	8005930 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <pvPortMalloc+0xf8>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	613b      	str	r3, [r7, #16]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800592a:	69b8      	ldr	r0, [r7, #24]
 800592c:	f000 f8f8 	bl	8005b20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <pvPortMalloc+0x17c>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <pvPortMalloc+0x17c>)
 800593c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800593e:	4b17      	ldr	r3, [pc, #92]	; (800599c <pvPortMalloc+0x17c>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <pvPortMalloc+0x184>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d203      	bcs.n	8005952 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <pvPortMalloc+0x17c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <pvPortMalloc+0x184>)
 8005950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <pvPortMalloc+0x178>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	431a      	orrs	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005966:	f7ff faa9 	bl	8004ebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <pvPortMalloc+0x16a>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <pvPortMalloc+0x168>
	return pvReturn;
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20001214 	.word	0x20001214
 8005998:	20001220 	.word	0x20001220
 800599c:	20001218 	.word	0x20001218
 80059a0:	2000120c 	.word	0x2000120c
 80059a4:	2000121c 	.word	0x2000121c

080059a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d048      	beq.n	8005a4c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059ba:	2308      	movs	r3, #8
 80059bc:	425b      	negs	r3, r3
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <vPortFree+0xac>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <vPortFree+0x44>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <vPortFree+0x62>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60bb      	str	r3, [r7, #8]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <vPortFree+0xac>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d115      	bne.n	8005a4c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <vPortFree+0xac>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a30:	f7ff fa36 	bl	8004ea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <vPortFree+0xb0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	4a06      	ldr	r2, [pc, #24]	; (8005a58 <vPortFree+0xb0>)
 8005a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a42:	6938      	ldr	r0, [r7, #16]
 8005a44:	f000 f86c 	bl	8005b20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a48:	f7ff fa38 	bl	8004ebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20001220 	.word	0x20001220
 8005a58:	20001218 	.word	0x20001218

08005a5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <prvHeapInit+0xac>)
 8005a6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3307      	adds	r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <prvHeapInit+0xac>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <prvHeapInit+0xb0>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <prvHeapInit+0xb0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <prvHeapInit+0xb4>)
 8005abc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <prvHeapInit+0xb4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <prvHeapInit+0xb4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <prvHeapInit+0xb4>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <prvHeapInit+0xb8>)
 8005aea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <prvHeapInit+0xbc>)
 8005af2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <prvHeapInit+0xc0>)
 8005af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005afa:	601a      	str	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	2000060c 	.word	0x2000060c
 8005b0c:	2000120c 	.word	0x2000120c
 8005b10:	20001214 	.word	0x20001214
 8005b14:	2000121c 	.word	0x2000121c
 8005b18:	20001218 	.word	0x20001218
 8005b1c:	20001220 	.word	0x20001220

08005b20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <prvInsertBlockIntoFreeList+0xa8>)
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e002      	b.n	8005b34 <prvInsertBlockIntoFreeList+0x14>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d8f7      	bhi.n	8005b2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	4413      	add	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d108      	bne.n	8005b62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d118      	bne.n	8005ba8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <prvInsertBlockIntoFreeList+0xac>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d00d      	beq.n	8005b9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e008      	b.n	8005bb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <prvInsertBlockIntoFreeList+0xac>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e003      	b.n	8005bb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d002      	beq.n	8005bbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr
 8005bc8:	2000120c 	.word	0x2000120c
 8005bcc:	20001214 	.word	0x20001214

08005bd0 <siprintf>:
 8005bd0:	b40e      	push	{r1, r2, r3}
 8005bd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bd6:	b500      	push	{lr}
 8005bd8:	b09c      	sub	sp, #112	; 0x70
 8005bda:	ab1d      	add	r3, sp, #116	; 0x74
 8005bdc:	9002      	str	r0, [sp, #8]
 8005bde:	9006      	str	r0, [sp, #24]
 8005be0:	9107      	str	r1, [sp, #28]
 8005be2:	9104      	str	r1, [sp, #16]
 8005be4:	4808      	ldr	r0, [pc, #32]	; (8005c08 <siprintf+0x38>)
 8005be6:	4909      	ldr	r1, [pc, #36]	; (8005c0c <siprintf+0x3c>)
 8005be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bec:	9105      	str	r1, [sp, #20]
 8005bee:	6800      	ldr	r0, [r0, #0]
 8005bf0:	a902      	add	r1, sp, #8
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	f000 f9f2 	bl	8005fdc <_svfiprintf_r>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	9b02      	ldr	r3, [sp, #8]
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	b01c      	add	sp, #112	; 0x70
 8005c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c04:	b003      	add	sp, #12
 8005c06:	4770      	bx	lr
 8005c08:	20000078 	.word	0x20000078
 8005c0c:	ffff0208 	.word	0xffff0208

08005c10 <memset>:
 8005c10:	4603      	mov	r3, r0
 8005c12:	4402      	add	r2, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <_reclaim_reent>:
 8005c20:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <_reclaim_reent+0xa8>)
 8005c22:	b570      	push	{r4, r5, r6, lr}
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4604      	mov	r4, r0
 8005c28:	4283      	cmp	r3, r0
 8005c2a:	d04b      	beq.n	8005cc4 <_reclaim_reent+0xa4>
 8005c2c:	69c3      	ldr	r3, [r0, #28]
 8005c2e:	b143      	cbz	r3, 8005c42 <_reclaim_reent+0x22>
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d144      	bne.n	8005cc0 <_reclaim_reent+0xa0>
 8005c36:	69e3      	ldr	r3, [r4, #28]
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	b111      	cbz	r1, 8005c42 <_reclaim_reent+0x22>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 f87f 	bl	8005d40 <_free_r>
 8005c42:	6961      	ldr	r1, [r4, #20]
 8005c44:	b111      	cbz	r1, 8005c4c <_reclaim_reent+0x2c>
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f87a 	bl	8005d40 <_free_r>
 8005c4c:	69e1      	ldr	r1, [r4, #28]
 8005c4e:	b111      	cbz	r1, 8005c56 <_reclaim_reent+0x36>
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 f875 	bl	8005d40 <_free_r>
 8005c56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005c58:	b111      	cbz	r1, 8005c60 <_reclaim_reent+0x40>
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 f870 	bl	8005d40 <_free_r>
 8005c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c62:	b111      	cbz	r1, 8005c6a <_reclaim_reent+0x4a>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f86b 	bl	8005d40 <_free_r>
 8005c6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c6c:	b111      	cbz	r1, 8005c74 <_reclaim_reent+0x54>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f866 	bl	8005d40 <_free_r>
 8005c74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c76:	b111      	cbz	r1, 8005c7e <_reclaim_reent+0x5e>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f861 	bl	8005d40 <_free_r>
 8005c7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c80:	b111      	cbz	r1, 8005c88 <_reclaim_reent+0x68>
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f85c 	bl	8005d40 <_free_r>
 8005c88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005c8a:	b111      	cbz	r1, 8005c92 <_reclaim_reent+0x72>
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f857 	bl	8005d40 <_free_r>
 8005c92:	6a23      	ldr	r3, [r4, #32]
 8005c94:	b1b3      	cbz	r3, 8005cc4 <_reclaim_reent+0xa4>
 8005c96:	4620      	mov	r0, r4
 8005c98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005c9c:	4718      	bx	r3
 8005c9e:	5949      	ldr	r1, [r1, r5]
 8005ca0:	b941      	cbnz	r1, 8005cb4 <_reclaim_reent+0x94>
 8005ca2:	3504      	adds	r5, #4
 8005ca4:	69e3      	ldr	r3, [r4, #28]
 8005ca6:	2d80      	cmp	r5, #128	; 0x80
 8005ca8:	68d9      	ldr	r1, [r3, #12]
 8005caa:	d1f8      	bne.n	8005c9e <_reclaim_reent+0x7e>
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f847 	bl	8005d40 <_free_r>
 8005cb2:	e7c0      	b.n	8005c36 <_reclaim_reent+0x16>
 8005cb4:	680e      	ldr	r6, [r1, #0]
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 f842 	bl	8005d40 <_free_r>
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	e7ef      	b.n	8005ca0 <_reclaim_reent+0x80>
 8005cc0:	2500      	movs	r5, #0
 8005cc2:	e7ef      	b.n	8005ca4 <_reclaim_reent+0x84>
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000078 	.word	0x20000078

08005ccc <__errno>:
 8005ccc:	4b01      	ldr	r3, [pc, #4]	; (8005cd4 <__errno+0x8>)
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20000078 	.word	0x20000078

08005cd8 <__libc_init_array>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	2600      	movs	r6, #0
 8005cdc:	4d0c      	ldr	r5, [pc, #48]	; (8005d10 <__libc_init_array+0x38>)
 8005cde:	4c0d      	ldr	r4, [pc, #52]	; (8005d14 <__libc_init_array+0x3c>)
 8005ce0:	1b64      	subs	r4, r4, r5
 8005ce2:	10a4      	asrs	r4, r4, #2
 8005ce4:	42a6      	cmp	r6, r4
 8005ce6:	d109      	bne.n	8005cfc <__libc_init_array+0x24>
 8005ce8:	f000 fc7a 	bl	80065e0 <_init>
 8005cec:	2600      	movs	r6, #0
 8005cee:	4d0a      	ldr	r5, [pc, #40]	; (8005d18 <__libc_init_array+0x40>)
 8005cf0:	4c0a      	ldr	r4, [pc, #40]	; (8005d1c <__libc_init_array+0x44>)
 8005cf2:	1b64      	subs	r4, r4, r5
 8005cf4:	10a4      	asrs	r4, r4, #2
 8005cf6:	42a6      	cmp	r6, r4
 8005cf8:	d105      	bne.n	8005d06 <__libc_init_array+0x2e>
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d00:	4798      	blx	r3
 8005d02:	3601      	adds	r6, #1
 8005d04:	e7ee      	b.n	8005ce4 <__libc_init_array+0xc>
 8005d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0a:	4798      	blx	r3
 8005d0c:	3601      	adds	r6, #1
 8005d0e:	e7f2      	b.n	8005cf6 <__libc_init_array+0x1e>
 8005d10:	08006794 	.word	0x08006794
 8005d14:	08006794 	.word	0x08006794
 8005d18:	08006794 	.word	0x08006794
 8005d1c:	08006798 	.word	0x08006798

08005d20 <__retarget_lock_acquire_recursive>:
 8005d20:	4770      	bx	lr

08005d22 <__retarget_lock_release_recursive>:
 8005d22:	4770      	bx	lr

08005d24 <memcpy>:
 8005d24:	440a      	add	r2, r1
 8005d26:	4291      	cmp	r1, r2
 8005d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d2c:	d100      	bne.n	8005d30 <memcpy+0xc>
 8005d2e:	4770      	bx	lr
 8005d30:	b510      	push	{r4, lr}
 8005d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d36:	4291      	cmp	r1, r2
 8005d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d3c:	d1f9      	bne.n	8005d32 <memcpy+0xe>
 8005d3e:	bd10      	pop	{r4, pc}

08005d40 <_free_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d040      	beq.n	8005dca <_free_r+0x8a>
 8005d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfb8      	it	lt
 8005d52:	18e4      	addlt	r4, r4, r3
 8005d54:	f000 f8dc 	bl	8005f10 <__malloc_lock>
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <_free_r+0x8c>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	b933      	cbnz	r3, 8005d6c <_free_r+0x2c>
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	4628      	mov	r0, r5
 8005d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d68:	f000 b8d8 	b.w	8005f1c <__malloc_unlock>
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d908      	bls.n	8005d82 <_free_r+0x42>
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	1821      	adds	r1, r4, r0
 8005d74:	428b      	cmp	r3, r1
 8005d76:	bf01      	itttt	eq
 8005d78:	6819      	ldreq	r1, [r3, #0]
 8005d7a:	685b      	ldreq	r3, [r3, #4]
 8005d7c:	1809      	addeq	r1, r1, r0
 8005d7e:	6021      	streq	r1, [r4, #0]
 8005d80:	e7ed      	b.n	8005d5e <_free_r+0x1e>
 8005d82:	461a      	mov	r2, r3
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b10b      	cbz	r3, 8005d8c <_free_r+0x4c>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d9fa      	bls.n	8005d82 <_free_r+0x42>
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	1850      	adds	r0, r2, r1
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d10b      	bne.n	8005dac <_free_r+0x6c>
 8005d94:	6820      	ldr	r0, [r4, #0]
 8005d96:	4401      	add	r1, r0
 8005d98:	1850      	adds	r0, r2, r1
 8005d9a:	4283      	cmp	r3, r0
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	d1e0      	bne.n	8005d62 <_free_r+0x22>
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4408      	add	r0, r1
 8005da6:	6010      	str	r0, [r2, #0]
 8005da8:	6053      	str	r3, [r2, #4]
 8005daa:	e7da      	b.n	8005d62 <_free_r+0x22>
 8005dac:	d902      	bls.n	8005db4 <_free_r+0x74>
 8005dae:	230c      	movs	r3, #12
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	e7d6      	b.n	8005d62 <_free_r+0x22>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	1821      	adds	r1, r4, r0
 8005db8:	428b      	cmp	r3, r1
 8005dba:	bf01      	itttt	eq
 8005dbc:	6819      	ldreq	r1, [r3, #0]
 8005dbe:	685b      	ldreq	r3, [r3, #4]
 8005dc0:	1809      	addeq	r1, r1, r0
 8005dc2:	6021      	streq	r1, [r4, #0]
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	6054      	str	r4, [r2, #4]
 8005dc8:	e7cb      	b.n	8005d62 <_free_r+0x22>
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20001364 	.word	0x20001364

08005dd0 <sbrk_aligned>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	4e0e      	ldr	r6, [pc, #56]	; (8005e0c <sbrk_aligned+0x3c>)
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	6831      	ldr	r1, [r6, #0]
 8005dd8:	4605      	mov	r5, r0
 8005dda:	b911      	cbnz	r1, 8005de2 <sbrk_aligned+0x12>
 8005ddc:	f000 fbaa 	bl	8006534 <_sbrk_r>
 8005de0:	6030      	str	r0, [r6, #0]
 8005de2:	4621      	mov	r1, r4
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 fba5 	bl	8006534 <_sbrk_r>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	d00a      	beq.n	8005e04 <sbrk_aligned+0x34>
 8005dee:	1cc4      	adds	r4, r0, #3
 8005df0:	f024 0403 	bic.w	r4, r4, #3
 8005df4:	42a0      	cmp	r0, r4
 8005df6:	d007      	beq.n	8005e08 <sbrk_aligned+0x38>
 8005df8:	1a21      	subs	r1, r4, r0
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fb9a 	bl	8006534 <_sbrk_r>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d101      	bne.n	8005e08 <sbrk_aligned+0x38>
 8005e04:	f04f 34ff 	mov.w	r4, #4294967295
 8005e08:	4620      	mov	r0, r4
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	20001368 	.word	0x20001368

08005e10 <_malloc_r>:
 8005e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e14:	1ccd      	adds	r5, r1, #3
 8005e16:	f025 0503 	bic.w	r5, r5, #3
 8005e1a:	3508      	adds	r5, #8
 8005e1c:	2d0c      	cmp	r5, #12
 8005e1e:	bf38      	it	cc
 8005e20:	250c      	movcc	r5, #12
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	4607      	mov	r7, r0
 8005e26:	db01      	blt.n	8005e2c <_malloc_r+0x1c>
 8005e28:	42a9      	cmp	r1, r5
 8005e2a:	d905      	bls.n	8005e38 <_malloc_r+0x28>
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	2600      	movs	r6, #0
 8005e30:	603b      	str	r3, [r7, #0]
 8005e32:	4630      	mov	r0, r6
 8005e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f0c <_malloc_r+0xfc>
 8005e3c:	f000 f868 	bl	8005f10 <__malloc_lock>
 8005e40:	f8d8 3000 	ldr.w	r3, [r8]
 8005e44:	461c      	mov	r4, r3
 8005e46:	bb5c      	cbnz	r4, 8005ea0 <_malloc_r+0x90>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f7ff ffc0 	bl	8005dd0 <sbrk_aligned>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	4604      	mov	r4, r0
 8005e54:	d155      	bne.n	8005f02 <_malloc_r+0xf2>
 8005e56:	f8d8 4000 	ldr.w	r4, [r8]
 8005e5a:	4626      	mov	r6, r4
 8005e5c:	2e00      	cmp	r6, #0
 8005e5e:	d145      	bne.n	8005eec <_malloc_r+0xdc>
 8005e60:	2c00      	cmp	r4, #0
 8005e62:	d048      	beq.n	8005ef6 <_malloc_r+0xe6>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	4631      	mov	r1, r6
 8005e68:	4638      	mov	r0, r7
 8005e6a:	eb04 0903 	add.w	r9, r4, r3
 8005e6e:	f000 fb61 	bl	8006534 <_sbrk_r>
 8005e72:	4581      	cmp	r9, r0
 8005e74:	d13f      	bne.n	8005ef6 <_malloc_r+0xe6>
 8005e76:	6821      	ldr	r1, [r4, #0]
 8005e78:	4638      	mov	r0, r7
 8005e7a:	1a6d      	subs	r5, r5, r1
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	f7ff ffa7 	bl	8005dd0 <sbrk_aligned>
 8005e82:	3001      	adds	r0, #1
 8005e84:	d037      	beq.n	8005ef6 <_malloc_r+0xe6>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	442b      	add	r3, r5
 8005e8a:	6023      	str	r3, [r4, #0]
 8005e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d038      	beq.n	8005f06 <_malloc_r+0xf6>
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	42a2      	cmp	r2, r4
 8005e98:	d12b      	bne.n	8005ef2 <_malloc_r+0xe2>
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
 8005e9e:	e00f      	b.n	8005ec0 <_malloc_r+0xb0>
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	1b52      	subs	r2, r2, r5
 8005ea4:	d41f      	bmi.n	8005ee6 <_malloc_r+0xd6>
 8005ea6:	2a0b      	cmp	r2, #11
 8005ea8:	d917      	bls.n	8005eda <_malloc_r+0xca>
 8005eaa:	1961      	adds	r1, r4, r5
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	6025      	str	r5, [r4, #0]
 8005eb0:	bf18      	it	ne
 8005eb2:	6059      	strne	r1, [r3, #4]
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	bf08      	it	eq
 8005eb8:	f8c8 1000 	streq.w	r1, [r8]
 8005ebc:	5162      	str	r2, [r4, r5]
 8005ebe:	604b      	str	r3, [r1, #4]
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f104 060b 	add.w	r6, r4, #11
 8005ec6:	f000 f829 	bl	8005f1c <__malloc_unlock>
 8005eca:	f026 0607 	bic.w	r6, r6, #7
 8005ece:	1d23      	adds	r3, r4, #4
 8005ed0:	1af2      	subs	r2, r6, r3
 8005ed2:	d0ae      	beq.n	8005e32 <_malloc_r+0x22>
 8005ed4:	1b9b      	subs	r3, r3, r6
 8005ed6:	50a3      	str	r3, [r4, r2]
 8005ed8:	e7ab      	b.n	8005e32 <_malloc_r+0x22>
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	6862      	ldr	r2, [r4, #4]
 8005ede:	d1dd      	bne.n	8005e9c <_malloc_r+0x8c>
 8005ee0:	f8c8 2000 	str.w	r2, [r8]
 8005ee4:	e7ec      	b.n	8005ec0 <_malloc_r+0xb0>
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	6864      	ldr	r4, [r4, #4]
 8005eea:	e7ac      	b.n	8005e46 <_malloc_r+0x36>
 8005eec:	4634      	mov	r4, r6
 8005eee:	6876      	ldr	r6, [r6, #4]
 8005ef0:	e7b4      	b.n	8005e5c <_malloc_r+0x4c>
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	e7cc      	b.n	8005e90 <_malloc_r+0x80>
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	4638      	mov	r0, r7
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	f000 f80e 	bl	8005f1c <__malloc_unlock>
 8005f00:	e797      	b.n	8005e32 <_malloc_r+0x22>
 8005f02:	6025      	str	r5, [r4, #0]
 8005f04:	e7dc      	b.n	8005ec0 <_malloc_r+0xb0>
 8005f06:	605b      	str	r3, [r3, #4]
 8005f08:	deff      	udf	#255	; 0xff
 8005f0a:	bf00      	nop
 8005f0c:	20001364 	.word	0x20001364

08005f10 <__malloc_lock>:
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <__malloc_lock+0x8>)
 8005f12:	f7ff bf05 	b.w	8005d20 <__retarget_lock_acquire_recursive>
 8005f16:	bf00      	nop
 8005f18:	20001360 	.word	0x20001360

08005f1c <__malloc_unlock>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	; (8005f24 <__malloc_unlock+0x8>)
 8005f1e:	f7ff bf00 	b.w	8005d22 <__retarget_lock_release_recursive>
 8005f22:	bf00      	nop
 8005f24:	20001360 	.word	0x20001360

08005f28 <__ssputs_r>:
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	461f      	mov	r7, r3
 8005f2e:	688e      	ldr	r6, [r1, #8]
 8005f30:	4682      	mov	sl, r0
 8005f32:	42be      	cmp	r6, r7
 8005f34:	460c      	mov	r4, r1
 8005f36:	4690      	mov	r8, r2
 8005f38:	680b      	ldr	r3, [r1, #0]
 8005f3a:	d82c      	bhi.n	8005f96 <__ssputs_r+0x6e>
 8005f3c:	898a      	ldrh	r2, [r1, #12]
 8005f3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f42:	d026      	beq.n	8005f92 <__ssputs_r+0x6a>
 8005f44:	6965      	ldr	r5, [r4, #20]
 8005f46:	6909      	ldr	r1, [r1, #16]
 8005f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f4c:	eba3 0901 	sub.w	r9, r3, r1
 8005f50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f54:	1c7b      	adds	r3, r7, #1
 8005f56:	444b      	add	r3, r9
 8005f58:	106d      	asrs	r5, r5, #1
 8005f5a:	429d      	cmp	r5, r3
 8005f5c:	bf38      	it	cc
 8005f5e:	461d      	movcc	r5, r3
 8005f60:	0553      	lsls	r3, r2, #21
 8005f62:	d527      	bpl.n	8005fb4 <__ssputs_r+0x8c>
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7ff ff53 	bl	8005e10 <_malloc_r>
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	b360      	cbz	r0, 8005fc8 <__ssputs_r+0xa0>
 8005f6e:	464a      	mov	r2, r9
 8005f70:	6921      	ldr	r1, [r4, #16]
 8005f72:	f7ff fed7 	bl	8005d24 <memcpy>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	6126      	str	r6, [r4, #16]
 8005f84:	444e      	add	r6, r9
 8005f86:	6026      	str	r6, [r4, #0]
 8005f88:	463e      	mov	r6, r7
 8005f8a:	6165      	str	r5, [r4, #20]
 8005f8c:	eba5 0509 	sub.w	r5, r5, r9
 8005f90:	60a5      	str	r5, [r4, #8]
 8005f92:	42be      	cmp	r6, r7
 8005f94:	d900      	bls.n	8005f98 <__ssputs_r+0x70>
 8005f96:	463e      	mov	r6, r7
 8005f98:	4632      	mov	r2, r6
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	f000 faaf 	bl	8006500 <memmove>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	68a3      	ldr	r3, [r4, #8]
 8005fa6:	1b9b      	subs	r3, r3, r6
 8005fa8:	60a3      	str	r3, [r4, #8]
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	4433      	add	r3, r6
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	f000 fadb 	bl	8006570 <_realloc_r>
 8005fba:	4606      	mov	r6, r0
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d1e0      	bne.n	8005f82 <__ssputs_r+0x5a>
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	6921      	ldr	r1, [r4, #16]
 8005fc4:	f7ff febc 	bl	8005d40 <_free_r>
 8005fc8:	230c      	movs	r3, #12
 8005fca:	f8ca 3000 	str.w	r3, [sl]
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	e7e9      	b.n	8005fb0 <__ssputs_r+0x88>

08005fdc <_svfiprintf_r>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	4698      	mov	r8, r3
 8005fe2:	898b      	ldrh	r3, [r1, #12]
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	061b      	lsls	r3, r3, #24
 8005fe8:	460d      	mov	r5, r1
 8005fea:	4614      	mov	r4, r2
 8005fec:	b09d      	sub	sp, #116	; 0x74
 8005fee:	d50e      	bpl.n	800600e <_svfiprintf_r+0x32>
 8005ff0:	690b      	ldr	r3, [r1, #16]
 8005ff2:	b963      	cbnz	r3, 800600e <_svfiprintf_r+0x32>
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	f7ff ff0b 	bl	8005e10 <_malloc_r>
 8005ffa:	6028      	str	r0, [r5, #0]
 8005ffc:	6128      	str	r0, [r5, #16]
 8005ffe:	b920      	cbnz	r0, 800600a <_svfiprintf_r+0x2e>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	e0d0      	b.n	80061ac <_svfiprintf_r+0x1d0>
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	616b      	str	r3, [r5, #20]
 800600e:	2300      	movs	r3, #0
 8006010:	9309      	str	r3, [sp, #36]	; 0x24
 8006012:	2320      	movs	r3, #32
 8006014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006018:	2330      	movs	r3, #48	; 0x30
 800601a:	f04f 0901 	mov.w	r9, #1
 800601e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006022:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80061c4 <_svfiprintf_r+0x1e8>
 8006026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800602a:	4623      	mov	r3, r4
 800602c:	469a      	mov	sl, r3
 800602e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006032:	b10a      	cbz	r2, 8006038 <_svfiprintf_r+0x5c>
 8006034:	2a25      	cmp	r2, #37	; 0x25
 8006036:	d1f9      	bne.n	800602c <_svfiprintf_r+0x50>
 8006038:	ebba 0b04 	subs.w	fp, sl, r4
 800603c:	d00b      	beq.n	8006056 <_svfiprintf_r+0x7a>
 800603e:	465b      	mov	r3, fp
 8006040:	4622      	mov	r2, r4
 8006042:	4629      	mov	r1, r5
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ff6f 	bl	8005f28 <__ssputs_r>
 800604a:	3001      	adds	r0, #1
 800604c:	f000 80a9 	beq.w	80061a2 <_svfiprintf_r+0x1c6>
 8006050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006052:	445a      	add	r2, fp
 8006054:	9209      	str	r2, [sp, #36]	; 0x24
 8006056:	f89a 3000 	ldrb.w	r3, [sl]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80a1 	beq.w	80061a2 <_svfiprintf_r+0x1c6>
 8006060:	2300      	movs	r3, #0
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606a:	f10a 0a01 	add.w	sl, sl, #1
 800606e:	9304      	str	r3, [sp, #16]
 8006070:	9307      	str	r3, [sp, #28]
 8006072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006076:	931a      	str	r3, [sp, #104]	; 0x68
 8006078:	4654      	mov	r4, sl
 800607a:	2205      	movs	r2, #5
 800607c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006080:	4850      	ldr	r0, [pc, #320]	; (80061c4 <_svfiprintf_r+0x1e8>)
 8006082:	f000 fa67 	bl	8006554 <memchr>
 8006086:	9a04      	ldr	r2, [sp, #16]
 8006088:	b9d8      	cbnz	r0, 80060c2 <_svfiprintf_r+0xe6>
 800608a:	06d0      	lsls	r0, r2, #27
 800608c:	bf44      	itt	mi
 800608e:	2320      	movmi	r3, #32
 8006090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006094:	0711      	lsls	r1, r2, #28
 8006096:	bf44      	itt	mi
 8006098:	232b      	movmi	r3, #43	; 0x2b
 800609a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609e:	f89a 3000 	ldrb.w	r3, [sl]
 80060a2:	2b2a      	cmp	r3, #42	; 0x2a
 80060a4:	d015      	beq.n	80060d2 <_svfiprintf_r+0xf6>
 80060a6:	4654      	mov	r4, sl
 80060a8:	2000      	movs	r0, #0
 80060aa:	f04f 0c0a 	mov.w	ip, #10
 80060ae:	9a07      	ldr	r2, [sp, #28]
 80060b0:	4621      	mov	r1, r4
 80060b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b6:	3b30      	subs	r3, #48	; 0x30
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d94d      	bls.n	8006158 <_svfiprintf_r+0x17c>
 80060bc:	b1b0      	cbz	r0, 80060ec <_svfiprintf_r+0x110>
 80060be:	9207      	str	r2, [sp, #28]
 80060c0:	e014      	b.n	80060ec <_svfiprintf_r+0x110>
 80060c2:	eba0 0308 	sub.w	r3, r0, r8
 80060c6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ca:	4313      	orrs	r3, r2
 80060cc:	46a2      	mov	sl, r4
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	e7d2      	b.n	8006078 <_svfiprintf_r+0x9c>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	1d19      	adds	r1, r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	9103      	str	r1, [sp, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfbb      	ittet	lt
 80060de:	425b      	neglt	r3, r3
 80060e0:	f042 0202 	orrlt.w	r2, r2, #2
 80060e4:	9307      	strge	r3, [sp, #28]
 80060e6:	9307      	strlt	r3, [sp, #28]
 80060e8:	bfb8      	it	lt
 80060ea:	9204      	strlt	r2, [sp, #16]
 80060ec:	7823      	ldrb	r3, [r4, #0]
 80060ee:	2b2e      	cmp	r3, #46	; 0x2e
 80060f0:	d10c      	bne.n	800610c <_svfiprintf_r+0x130>
 80060f2:	7863      	ldrb	r3, [r4, #1]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d134      	bne.n	8006162 <_svfiprintf_r+0x186>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	3402      	adds	r4, #2
 80060fc:	1d1a      	adds	r2, r3, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	9203      	str	r2, [sp, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	bfb8      	it	lt
 8006106:	f04f 33ff 	movlt.w	r3, #4294967295
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80061c8 <_svfiprintf_r+0x1ec>
 8006110:	2203      	movs	r2, #3
 8006112:	4650      	mov	r0, sl
 8006114:	7821      	ldrb	r1, [r4, #0]
 8006116:	f000 fa1d 	bl	8006554 <memchr>
 800611a:	b138      	cbz	r0, 800612c <_svfiprintf_r+0x150>
 800611c:	2240      	movs	r2, #64	; 0x40
 800611e:	9b04      	ldr	r3, [sp, #16]
 8006120:	eba0 000a 	sub.w	r0, r0, sl
 8006124:	4082      	lsls	r2, r0
 8006126:	4313      	orrs	r3, r2
 8006128:	3401      	adds	r4, #1
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006130:	2206      	movs	r2, #6
 8006132:	4826      	ldr	r0, [pc, #152]	; (80061cc <_svfiprintf_r+0x1f0>)
 8006134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006138:	f000 fa0c 	bl	8006554 <memchr>
 800613c:	2800      	cmp	r0, #0
 800613e:	d038      	beq.n	80061b2 <_svfiprintf_r+0x1d6>
 8006140:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <_svfiprintf_r+0x1f4>)
 8006142:	bb1b      	cbnz	r3, 800618c <_svfiprintf_r+0x1b0>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	3307      	adds	r3, #7
 8006148:	f023 0307 	bic.w	r3, r3, #7
 800614c:	3308      	adds	r3, #8
 800614e:	9303      	str	r3, [sp, #12]
 8006150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006152:	4433      	add	r3, r6
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	e768      	b.n	800602a <_svfiprintf_r+0x4e>
 8006158:	460c      	mov	r4, r1
 800615a:	2001      	movs	r0, #1
 800615c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006160:	e7a6      	b.n	80060b0 <_svfiprintf_r+0xd4>
 8006162:	2300      	movs	r3, #0
 8006164:	f04f 0c0a 	mov.w	ip, #10
 8006168:	4619      	mov	r1, r3
 800616a:	3401      	adds	r4, #1
 800616c:	9305      	str	r3, [sp, #20]
 800616e:	4620      	mov	r0, r4
 8006170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006174:	3a30      	subs	r2, #48	; 0x30
 8006176:	2a09      	cmp	r2, #9
 8006178:	d903      	bls.n	8006182 <_svfiprintf_r+0x1a6>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0c6      	beq.n	800610c <_svfiprintf_r+0x130>
 800617e:	9105      	str	r1, [sp, #20]
 8006180:	e7c4      	b.n	800610c <_svfiprintf_r+0x130>
 8006182:	4604      	mov	r4, r0
 8006184:	2301      	movs	r3, #1
 8006186:	fb0c 2101 	mla	r1, ip, r1, r2
 800618a:	e7f0      	b.n	800616e <_svfiprintf_r+0x192>
 800618c:	ab03      	add	r3, sp, #12
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	462a      	mov	r2, r5
 8006192:	4638      	mov	r0, r7
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <_svfiprintf_r+0x1f8>)
 8006196:	a904      	add	r1, sp, #16
 8006198:	f3af 8000 	nop.w
 800619c:	1c42      	adds	r2, r0, #1
 800619e:	4606      	mov	r6, r0
 80061a0:	d1d6      	bne.n	8006150 <_svfiprintf_r+0x174>
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	065b      	lsls	r3, r3, #25
 80061a6:	f53f af2d 	bmi.w	8006004 <_svfiprintf_r+0x28>
 80061aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ac:	b01d      	add	sp, #116	; 0x74
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	ab03      	add	r3, sp, #12
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	462a      	mov	r2, r5
 80061b8:	4638      	mov	r0, r7
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <_svfiprintf_r+0x1f8>)
 80061bc:	a904      	add	r1, sp, #16
 80061be:	f000 f87d 	bl	80062bc <_printf_i>
 80061c2:	e7eb      	b.n	800619c <_svfiprintf_r+0x1c0>
 80061c4:	0800675e 	.word	0x0800675e
 80061c8:	08006764 	.word	0x08006764
 80061cc:	08006768 	.word	0x08006768
 80061d0:	00000000 	.word	0x00000000
 80061d4:	08005f29 	.word	0x08005f29

080061d8 <_printf_common>:
 80061d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	4616      	mov	r6, r2
 80061de:	4699      	mov	r9, r3
 80061e0:	688a      	ldr	r2, [r1, #8]
 80061e2:	690b      	ldr	r3, [r1, #16]
 80061e4:	4607      	mov	r7, r0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	bfb8      	it	lt
 80061ea:	4613      	movlt	r3, r2
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f2:	460c      	mov	r4, r1
 80061f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f8:	b10a      	cbz	r2, 80061fe <_printf_common+0x26>
 80061fa:	3301      	adds	r3, #1
 80061fc:	6033      	str	r3, [r6, #0]
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	0699      	lsls	r1, r3, #26
 8006202:	bf42      	ittt	mi
 8006204:	6833      	ldrmi	r3, [r6, #0]
 8006206:	3302      	addmi	r3, #2
 8006208:	6033      	strmi	r3, [r6, #0]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	f015 0506 	ands.w	r5, r5, #6
 8006210:	d106      	bne.n	8006220 <_printf_common+0x48>
 8006212:	f104 0a19 	add.w	sl, r4, #25
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	6832      	ldr	r2, [r6, #0]
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	42ab      	cmp	r3, r5
 800621e:	dc2b      	bgt.n	8006278 <_printf_common+0xa0>
 8006220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006224:	1e13      	subs	r3, r2, #0
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	bf18      	it	ne
 800622a:	2301      	movne	r3, #1
 800622c:	0692      	lsls	r2, r2, #26
 800622e:	d430      	bmi.n	8006292 <_printf_common+0xba>
 8006230:	4649      	mov	r1, r9
 8006232:	4638      	mov	r0, r7
 8006234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006238:	47c0      	blx	r8
 800623a:	3001      	adds	r0, #1
 800623c:	d023      	beq.n	8006286 <_printf_common+0xae>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	6922      	ldr	r2, [r4, #16]
 8006242:	f003 0306 	and.w	r3, r3, #6
 8006246:	2b04      	cmp	r3, #4
 8006248:	bf14      	ite	ne
 800624a:	2500      	movne	r5, #0
 800624c:	6833      	ldreq	r3, [r6, #0]
 800624e:	f04f 0600 	mov.w	r6, #0
 8006252:	bf08      	it	eq
 8006254:	68e5      	ldreq	r5, [r4, #12]
 8006256:	f104 041a 	add.w	r4, r4, #26
 800625a:	bf08      	it	eq
 800625c:	1aed      	subeq	r5, r5, r3
 800625e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006262:	bf08      	it	eq
 8006264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006268:	4293      	cmp	r3, r2
 800626a:	bfc4      	itt	gt
 800626c:	1a9b      	subgt	r3, r3, r2
 800626e:	18ed      	addgt	r5, r5, r3
 8006270:	42b5      	cmp	r5, r6
 8006272:	d11a      	bne.n	80062aa <_printf_common+0xd2>
 8006274:	2000      	movs	r0, #0
 8006276:	e008      	b.n	800628a <_printf_common+0xb2>
 8006278:	2301      	movs	r3, #1
 800627a:	4652      	mov	r2, sl
 800627c:	4649      	mov	r1, r9
 800627e:	4638      	mov	r0, r7
 8006280:	47c0      	blx	r8
 8006282:	3001      	adds	r0, #1
 8006284:	d103      	bne.n	800628e <_printf_common+0xb6>
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628e:	3501      	adds	r5, #1
 8006290:	e7c1      	b.n	8006216 <_printf_common+0x3e>
 8006292:	2030      	movs	r0, #48	; 0x30
 8006294:	18e1      	adds	r1, r4, r3
 8006296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a0:	4422      	add	r2, r4
 80062a2:	3302      	adds	r3, #2
 80062a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062a8:	e7c2      	b.n	8006230 <_printf_common+0x58>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4622      	mov	r2, r4
 80062ae:	4649      	mov	r1, r9
 80062b0:	4638      	mov	r0, r7
 80062b2:	47c0      	blx	r8
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0e6      	beq.n	8006286 <_printf_common+0xae>
 80062b8:	3601      	adds	r6, #1
 80062ba:	e7d9      	b.n	8006270 <_printf_common+0x98>

080062bc <_printf_i>:
 80062bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c0:	7e0f      	ldrb	r7, [r1, #24]
 80062c2:	4691      	mov	r9, r2
 80062c4:	2f78      	cmp	r7, #120	; 0x78
 80062c6:	4680      	mov	r8, r0
 80062c8:	460c      	mov	r4, r1
 80062ca:	469a      	mov	sl, r3
 80062cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062d2:	d807      	bhi.n	80062e4 <_printf_i+0x28>
 80062d4:	2f62      	cmp	r7, #98	; 0x62
 80062d6:	d80a      	bhi.n	80062ee <_printf_i+0x32>
 80062d8:	2f00      	cmp	r7, #0
 80062da:	f000 80d5 	beq.w	8006488 <_printf_i+0x1cc>
 80062de:	2f58      	cmp	r7, #88	; 0x58
 80062e0:	f000 80c1 	beq.w	8006466 <_printf_i+0x1aa>
 80062e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062ec:	e03a      	b.n	8006364 <_printf_i+0xa8>
 80062ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062f2:	2b15      	cmp	r3, #21
 80062f4:	d8f6      	bhi.n	80062e4 <_printf_i+0x28>
 80062f6:	a101      	add	r1, pc, #4	; (adr r1, 80062fc <_printf_i+0x40>)
 80062f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062fc:	08006355 	.word	0x08006355
 8006300:	08006369 	.word	0x08006369
 8006304:	080062e5 	.word	0x080062e5
 8006308:	080062e5 	.word	0x080062e5
 800630c:	080062e5 	.word	0x080062e5
 8006310:	080062e5 	.word	0x080062e5
 8006314:	08006369 	.word	0x08006369
 8006318:	080062e5 	.word	0x080062e5
 800631c:	080062e5 	.word	0x080062e5
 8006320:	080062e5 	.word	0x080062e5
 8006324:	080062e5 	.word	0x080062e5
 8006328:	0800646f 	.word	0x0800646f
 800632c:	08006395 	.word	0x08006395
 8006330:	08006429 	.word	0x08006429
 8006334:	080062e5 	.word	0x080062e5
 8006338:	080062e5 	.word	0x080062e5
 800633c:	08006491 	.word	0x08006491
 8006340:	080062e5 	.word	0x080062e5
 8006344:	08006395 	.word	0x08006395
 8006348:	080062e5 	.word	0x080062e5
 800634c:	080062e5 	.word	0x080062e5
 8006350:	08006431 	.word	0x08006431
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	602a      	str	r2, [r5, #0]
 800635c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006364:	2301      	movs	r3, #1
 8006366:	e0a0      	b.n	80064aa <_printf_i+0x1ee>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	0607      	lsls	r7, r0, #24
 800636e:	f103 0104 	add.w	r1, r3, #4
 8006372:	6029      	str	r1, [r5, #0]
 8006374:	d501      	bpl.n	800637a <_printf_i+0xbe>
 8006376:	681e      	ldr	r6, [r3, #0]
 8006378:	e003      	b.n	8006382 <_printf_i+0xc6>
 800637a:	0646      	lsls	r6, r0, #25
 800637c:	d5fb      	bpl.n	8006376 <_printf_i+0xba>
 800637e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006382:	2e00      	cmp	r6, #0
 8006384:	da03      	bge.n	800638e <_printf_i+0xd2>
 8006386:	232d      	movs	r3, #45	; 0x2d
 8006388:	4276      	negs	r6, r6
 800638a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638e:	230a      	movs	r3, #10
 8006390:	4859      	ldr	r0, [pc, #356]	; (80064f8 <_printf_i+0x23c>)
 8006392:	e012      	b.n	80063ba <_printf_i+0xfe>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1d19      	adds	r1, r3, #4
 800639a:	6029      	str	r1, [r5, #0]
 800639c:	0605      	lsls	r5, r0, #24
 800639e:	d501      	bpl.n	80063a4 <_printf_i+0xe8>
 80063a0:	681e      	ldr	r6, [r3, #0]
 80063a2:	e002      	b.n	80063aa <_printf_i+0xee>
 80063a4:	0641      	lsls	r1, r0, #25
 80063a6:	d5fb      	bpl.n	80063a0 <_printf_i+0xe4>
 80063a8:	881e      	ldrh	r6, [r3, #0]
 80063aa:	2f6f      	cmp	r7, #111	; 0x6f
 80063ac:	bf0c      	ite	eq
 80063ae:	2308      	moveq	r3, #8
 80063b0:	230a      	movne	r3, #10
 80063b2:	4851      	ldr	r0, [pc, #324]	; (80064f8 <_printf_i+0x23c>)
 80063b4:	2100      	movs	r1, #0
 80063b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063ba:	6865      	ldr	r5, [r4, #4]
 80063bc:	2d00      	cmp	r5, #0
 80063be:	bfa8      	it	ge
 80063c0:	6821      	ldrge	r1, [r4, #0]
 80063c2:	60a5      	str	r5, [r4, #8]
 80063c4:	bfa4      	itt	ge
 80063c6:	f021 0104 	bicge.w	r1, r1, #4
 80063ca:	6021      	strge	r1, [r4, #0]
 80063cc:	b90e      	cbnz	r6, 80063d2 <_printf_i+0x116>
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	d04b      	beq.n	800646a <_printf_i+0x1ae>
 80063d2:	4615      	mov	r5, r2
 80063d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80063d8:	fb03 6711 	mls	r7, r3, r1, r6
 80063dc:	5dc7      	ldrb	r7, [r0, r7]
 80063de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063e2:	4637      	mov	r7, r6
 80063e4:	42bb      	cmp	r3, r7
 80063e6:	460e      	mov	r6, r1
 80063e8:	d9f4      	bls.n	80063d4 <_printf_i+0x118>
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d10b      	bne.n	8006406 <_printf_i+0x14a>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	07de      	lsls	r6, r3, #31
 80063f2:	d508      	bpl.n	8006406 <_printf_i+0x14a>
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	6861      	ldr	r1, [r4, #4]
 80063f8:	4299      	cmp	r1, r3
 80063fa:	bfde      	ittt	le
 80063fc:	2330      	movle	r3, #48	; 0x30
 80063fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006406:	1b52      	subs	r2, r2, r5
 8006408:	6122      	str	r2, [r4, #16]
 800640a:	464b      	mov	r3, r9
 800640c:	4621      	mov	r1, r4
 800640e:	4640      	mov	r0, r8
 8006410:	f8cd a000 	str.w	sl, [sp]
 8006414:	aa03      	add	r2, sp, #12
 8006416:	f7ff fedf 	bl	80061d8 <_printf_common>
 800641a:	3001      	adds	r0, #1
 800641c:	d14a      	bne.n	80064b4 <_printf_i+0x1f8>
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	b004      	add	sp, #16
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f043 0320 	orr.w	r3, r3, #32
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	2778      	movs	r7, #120	; 0x78
 8006432:	4832      	ldr	r0, [pc, #200]	; (80064fc <_printf_i+0x240>)
 8006434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	6829      	ldr	r1, [r5, #0]
 800643c:	061f      	lsls	r7, r3, #24
 800643e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006442:	d402      	bmi.n	800644a <_printf_i+0x18e>
 8006444:	065f      	lsls	r7, r3, #25
 8006446:	bf48      	it	mi
 8006448:	b2b6      	uxthmi	r6, r6
 800644a:	07df      	lsls	r7, r3, #31
 800644c:	bf48      	it	mi
 800644e:	f043 0320 	orrmi.w	r3, r3, #32
 8006452:	6029      	str	r1, [r5, #0]
 8006454:	bf48      	it	mi
 8006456:	6023      	strmi	r3, [r4, #0]
 8006458:	b91e      	cbnz	r6, 8006462 <_printf_i+0x1a6>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f023 0320 	bic.w	r3, r3, #32
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	2310      	movs	r3, #16
 8006464:	e7a6      	b.n	80063b4 <_printf_i+0xf8>
 8006466:	4824      	ldr	r0, [pc, #144]	; (80064f8 <_printf_i+0x23c>)
 8006468:	e7e4      	b.n	8006434 <_printf_i+0x178>
 800646a:	4615      	mov	r5, r2
 800646c:	e7bd      	b.n	80063ea <_printf_i+0x12e>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	6826      	ldr	r6, [r4, #0]
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	6961      	ldr	r1, [r4, #20]
 8006476:	6028      	str	r0, [r5, #0]
 8006478:	0635      	lsls	r5, r6, #24
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	d501      	bpl.n	8006482 <_printf_i+0x1c6>
 800647e:	6019      	str	r1, [r3, #0]
 8006480:	e002      	b.n	8006488 <_printf_i+0x1cc>
 8006482:	0670      	lsls	r0, r6, #25
 8006484:	d5fb      	bpl.n	800647e <_printf_i+0x1c2>
 8006486:	8019      	strh	r1, [r3, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	4615      	mov	r5, r2
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	e7bc      	b.n	800640a <_printf_i+0x14e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	2100      	movs	r1, #0
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	4628      	mov	r0, r5
 800649e:	f000 f859 	bl	8006554 <memchr>
 80064a2:	b108      	cbz	r0, 80064a8 <_printf_i+0x1ec>
 80064a4:	1b40      	subs	r0, r0, r5
 80064a6:	6060      	str	r0, [r4, #4]
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2300      	movs	r3, #0
 80064ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b2:	e7aa      	b.n	800640a <_printf_i+0x14e>
 80064b4:	462a      	mov	r2, r5
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	47d0      	blx	sl
 80064be:	3001      	adds	r0, #1
 80064c0:	d0ad      	beq.n	800641e <_printf_i+0x162>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	079b      	lsls	r3, r3, #30
 80064c6:	d413      	bmi.n	80064f0 <_printf_i+0x234>
 80064c8:	68e0      	ldr	r0, [r4, #12]
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	4298      	cmp	r0, r3
 80064ce:	bfb8      	it	lt
 80064d0:	4618      	movlt	r0, r3
 80064d2:	e7a6      	b.n	8006422 <_printf_i+0x166>
 80064d4:	2301      	movs	r3, #1
 80064d6:	4632      	mov	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	47d0      	blx	sl
 80064de:	3001      	adds	r0, #1
 80064e0:	d09d      	beq.n	800641e <_printf_i+0x162>
 80064e2:	3501      	adds	r5, #1
 80064e4:	68e3      	ldr	r3, [r4, #12]
 80064e6:	9903      	ldr	r1, [sp, #12]
 80064e8:	1a5b      	subs	r3, r3, r1
 80064ea:	42ab      	cmp	r3, r5
 80064ec:	dcf2      	bgt.n	80064d4 <_printf_i+0x218>
 80064ee:	e7eb      	b.n	80064c8 <_printf_i+0x20c>
 80064f0:	2500      	movs	r5, #0
 80064f2:	f104 0619 	add.w	r6, r4, #25
 80064f6:	e7f5      	b.n	80064e4 <_printf_i+0x228>
 80064f8:	0800676f 	.word	0x0800676f
 80064fc:	08006780 	.word	0x08006780

08006500 <memmove>:
 8006500:	4288      	cmp	r0, r1
 8006502:	b510      	push	{r4, lr}
 8006504:	eb01 0402 	add.w	r4, r1, r2
 8006508:	d902      	bls.n	8006510 <memmove+0x10>
 800650a:	4284      	cmp	r4, r0
 800650c:	4623      	mov	r3, r4
 800650e:	d807      	bhi.n	8006520 <memmove+0x20>
 8006510:	1e43      	subs	r3, r0, #1
 8006512:	42a1      	cmp	r1, r4
 8006514:	d008      	beq.n	8006528 <memmove+0x28>
 8006516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800651a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800651e:	e7f8      	b.n	8006512 <memmove+0x12>
 8006520:	4601      	mov	r1, r0
 8006522:	4402      	add	r2, r0
 8006524:	428a      	cmp	r2, r1
 8006526:	d100      	bne.n	800652a <memmove+0x2a>
 8006528:	bd10      	pop	{r4, pc}
 800652a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800652e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006532:	e7f7      	b.n	8006524 <memmove+0x24>

08006534 <_sbrk_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	2300      	movs	r3, #0
 8006538:	4d05      	ldr	r5, [pc, #20]	; (8006550 <_sbrk_r+0x1c>)
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fa ffbc 	bl	80014bc <_sbrk>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_sbrk_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_sbrk_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	2000135c 	.word	0x2000135c

08006554 <memchr>:
 8006554:	4603      	mov	r3, r0
 8006556:	b510      	push	{r4, lr}
 8006558:	b2c9      	uxtb	r1, r1
 800655a:	4402      	add	r2, r0
 800655c:	4293      	cmp	r3, r2
 800655e:	4618      	mov	r0, r3
 8006560:	d101      	bne.n	8006566 <memchr+0x12>
 8006562:	2000      	movs	r0, #0
 8006564:	e003      	b.n	800656e <memchr+0x1a>
 8006566:	7804      	ldrb	r4, [r0, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	428c      	cmp	r4, r1
 800656c:	d1f6      	bne.n	800655c <memchr+0x8>
 800656e:	bd10      	pop	{r4, pc}

08006570 <_realloc_r>:
 8006570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006574:	4680      	mov	r8, r0
 8006576:	4614      	mov	r4, r2
 8006578:	460e      	mov	r6, r1
 800657a:	b921      	cbnz	r1, 8006586 <_realloc_r+0x16>
 800657c:	4611      	mov	r1, r2
 800657e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006582:	f7ff bc45 	b.w	8005e10 <_malloc_r>
 8006586:	b92a      	cbnz	r2, 8006594 <_realloc_r+0x24>
 8006588:	f7ff fbda 	bl	8005d40 <_free_r>
 800658c:	4625      	mov	r5, r4
 800658e:	4628      	mov	r0, r5
 8006590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006594:	f000 f81b 	bl	80065ce <_malloc_usable_size_r>
 8006598:	4284      	cmp	r4, r0
 800659a:	4607      	mov	r7, r0
 800659c:	d802      	bhi.n	80065a4 <_realloc_r+0x34>
 800659e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065a2:	d812      	bhi.n	80065ca <_realloc_r+0x5a>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4640      	mov	r0, r8
 80065a8:	f7ff fc32 	bl	8005e10 <_malloc_r>
 80065ac:	4605      	mov	r5, r0
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d0ed      	beq.n	800658e <_realloc_r+0x1e>
 80065b2:	42bc      	cmp	r4, r7
 80065b4:	4622      	mov	r2, r4
 80065b6:	4631      	mov	r1, r6
 80065b8:	bf28      	it	cs
 80065ba:	463a      	movcs	r2, r7
 80065bc:	f7ff fbb2 	bl	8005d24 <memcpy>
 80065c0:	4631      	mov	r1, r6
 80065c2:	4640      	mov	r0, r8
 80065c4:	f7ff fbbc 	bl	8005d40 <_free_r>
 80065c8:	e7e1      	b.n	800658e <_realloc_r+0x1e>
 80065ca:	4635      	mov	r5, r6
 80065cc:	e7df      	b.n	800658e <_realloc_r+0x1e>

080065ce <_malloc_usable_size_r>:
 80065ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d2:	1f18      	subs	r0, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfbc      	itt	lt
 80065d8:	580b      	ldrlt	r3, [r1, r0]
 80065da:	18c0      	addlt	r0, r0, r3
 80065dc:	4770      	bx	lr
	...

080065e0 <_init>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	bf00      	nop
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr

080065ec <_fini>:
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	bf00      	nop
 80065f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f2:	bc08      	pop	{r3}
 80065f4:	469e      	mov	lr, r3
 80065f6:	4770      	bx	lr
